#ifndef JetTaggingParameters_h
#define JetTaggingParameters_h

#include <iostream>

using namespace std;

namespace JetTagging
{

  enum Tagger
  {
    DeepJet,
    DeepJet_B,
    DeepJet_CvB,
    DeepJet_CvL,
    DeepJet_QG,
    ParticleNet_B,
    ParticleNet_CvB,
    ParticleNet_CvL,
    ParticleNet_QvG,
    ParticleNet_TauVJet,
    RobustParticleTransFormerAK4_B,
    RobustParticleTransFormerAK4_CvB,
    RobustParticleTransFormerAK4_CvL,
    RobustParticleTransFormerAK4_QG

  };
  inline string TaggerToString(Tagger t)
  {
    if (t == DeepJet)
      return "DeepJet";
    if (t == DeepJet_B)
      return "DeepJet_B";
    if (t == DeepJet_CvB)
      return "DeepJet_CvB";
    if (t == DeepJet_CvL)
      return "DeepJet_CvL";
    if (t == DeepJet_QG)
      return "DeepJet_QG";
    if (t == ParticleNet_B)
      return "ParticleNet_B";
    if (t == ParticleNet_CvB)
      return "ParticleNet_CvB";
    if (t == ParticleNet_CvL)
      return "ParticleNet_CvL";
    if (t == ParticleNet_QvG)
      return "ParticleNet_QvG";
    if (t == ParticleNet_TauVJet)
      return "ParticleNet_TauVJet";
    if (t == RobustParticleTransFormerAK4_B)
      return "RobustParticleTransFormerAK4_B";
    if (t == RobustParticleTransFormerAK4_CvB)
      return "RobustParticleTransFormerAK4_CvB";
    if (t == RobustParticleTransFormerAK4_CvL)
      return "RobustParticleTransFormerAK4_CvL";
    if (t == RobustParticleTransFormerAK4_QG)
      return "RobustParticleTransFormerAK4_QG";

    cerr << "[JetTaggingParameters::TaggerToString] Wrong tagger enum : " << t << endl;
    exit(ENODATA);

    return "None";
  }
  inline Tagger StringToTagger(string s)
  {
    if (s == "DeepJet")
      return DeepJet;
    if (s == "DeepJet_B")
      return DeepJet_B;
    if (s == "DeepJet_CvB")
      return DeepJet_CvB;
    if (s == "DeepJet_CvL")
      return DeepJet_CvL;
    if (s == "DeepJet_QG")
      return DeepJet_QG;
    if (s == "ParticleNet_B")
      return ParticleNet_B;
    if (s == "ParticleNet_CvB")
      return ParticleNet_CvB;
    if (s == "ParticleNet_CvL")
      return ParticleNet_CvL;
    if (s == "ParticleNet_QvG")
      return ParticleNet_QvG;
    if (s == "ParticleNet_TauVJet")
      return ParticleNet_TauVJet;
    if (s == "RobustParticleTransFormerAK4_B")
      return RobustParticleTransFormerAK4_B;
    if (s == "RobustParticleTransFormerAK4_CvB")
      return RobustParticleTransFormerAK4_CvB;
    if (s == "RobustParticleTransFormerAK4_CvL")
      return RobustParticleTransFormerAK4_CvL;
    if (s == "RobustParticleTransFormerAK4_QG")
      return RobustParticleTransFormerAK4_QG;

    cerr << "[JetTaggingParameters:: StringToTagger] Wrong tagger string : " << s << endl;
    exit(ENODATA);

    return DeepCSV;
  }

  enum WP
  {
    Loose,
    Medium,
    Tight,
    XTight,
    XXTight
  };

  inline string WPToString(WP wp)
  {
    if (wp == Loose)
      return "Loose";
    if (wp == Medium)
      return "Medium";
    if (wp == Tight)
      return "Tight";
    if (wp == XTight)
      return "XTight";
    if (wp == XXTight)
      return "XXTight";

    cerr << "[JetTaggingParameters::WPToString] Wrong WP enum : " << wp << endl;
    exit(ENODATA);

    return "None";
  }

  enum MeasurmentType
  {
    comb,
    mujets,
    light,
    shape,
    ltsv,
    kinfit,
    wc,
    negtag
  };

  inline string MeasurmentTypeToString(MeasurmentType mt)
  {
    if (mt == comb)
      return "comb";
    if (mt == mujets)
      return "mujets";
    if (mt == light)
      return "light";
    if (mt == shape)
      return "shape";
    if (mt == ptrel)
      return "ptrel";
    if (mt == sys8)
      return "sys8";
    if (mt == ltsv)
      return "ltsv";
    if (mt == tnp)
      return "tnp";
    if (mt == kinfit)
      return "kinfit";
    if (mt == wc)
      return "wc";
    if (mt == negtag)
      return "negtag";

    cerr << "[JetTaggingParameters::MeasurmentTypeToString] Wrong MeasurmentType enum : " << mt << endl;
    exit(ENODATA);

    return "None";
  }

  class Parameters
  {
  public:
    inline Parameters()
    {
    }
    inline Parameters(Tagger t, WP wp, MeasurmentType mt_l, MeasurmentType mt_h)
    {
      j_Tagger = t;
      j_WP = wp;
      j_MeasurmentType_Light = mt_l;
      j_MeasurmentType_Heavy = mt_h;
    }

    Tagger j_Tagger;
    WP j_WP;
    MeasurmentType j_MeasurmentType_Light, j_MeasurmentType_Heavy;

    inline void Print()
    {
      printf("(%s,%s,%s,%s)\n", TaggerToString(j_Tagger).c_str(), WPToString(j_WP).c_str(), MeasurmentTypeToString(j_MeasurmentType_Light).c_str(), MeasurmentTypeToString(j_MeasurmentType_Heavy).c_str());
    }
  };

} // namespace

#endif