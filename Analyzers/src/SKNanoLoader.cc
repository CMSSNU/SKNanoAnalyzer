#define SKNanoLoader_cxx
#include "SKNanoLoader.h"
using json = nlohmann::json;

SKNanoLoader::SKNanoLoader()
{
    MaxEvent = -1;
    NSkipEvent = 0;
    LogEvery = 1000;
    IsDATA = false;
    DataStream = "";
    MCSample = "";
    SetEra("2018");
    xsec = 1.;
    sumW = 1.;
    sumSign = 1.;
    Userflags.clear();
}

SKNanoLoader::~SKNanoLoader()
{
    for (auto &[key, value] : TriggerMap)
    {
        delete value.first;
    }
    if (!fChain)
        return;
    if (fChain->GetCurrentFile())
        fChain->GetCurrentFile()->Close();
}

void SKNanoLoader::Loop()
{
    long nentries = fReader->GetEntries();
    if (MaxEvent > 0)
        nentries = std::min(nentries, MaxEvent);
    auto startTime = std::chrono::steady_clock::now();
    cout << "[SKNanoLoader::Loop] Event Loop Started" << endl;

    int jentry = 0;
    while (fReader->Next())
    {
        if (jentry < NSkipEvent)
            continue;
        // Log progress for every LogEvery events
        if (jentry % LogEvery == 0)
        {
            auto currentTime = std::chrono::steady_clock::now();
            std::chrono::duration<double> elapsedTime = currentTime - startTime;
            double timePerEvent = elapsedTime.count() / (jentry + 1);
            double estimatedRemaining = (nentries - jentry) * timePerEvent;

            cout << "[SKNanoLoader::Loop] Processing " << jentry << " / " << nentries
                 << " | Elapsed: " << std::fixed << std::setprecision(2) << elapsedTime.count() << "s, Remaining: " << estimatedRemaining << "s" << endl;
        }
        executeEvent();
        jentry++;
    }
    cout << "[SKNanoLoader::Loop] Event Loop Finished" << endl;
}

void SKNanoLoader::Init()
{
    auto SafeSetBranchAddress = [this](const TString &branchName, void *address)
    {
        TBranch *branch = fChain->GetBranch(branchName);
        if (!branch)
        {
            cout << "[SKNanoGenLoader::Init] Warning:Branch " << branchName << " not found" << endl;
            return;
        }
        fChain->SetBranchStatus(branchName, 1);
        fChain->SetBranchAddress(branchName, address);
    };

    cout << "[SKNanoLoader::Init] Initializing. Era = " << DataEra << " Run =  " << Run << endl;
    if (fChain->GetEntries() == 0)
    {
        cout << "[SKNanoLoader::Init] No Entries in the Tree" << endl;
        cout << "[SKNanoLoader::Init] Exiting without make output..." << endl;
        exit(0);
    }

    fChain->SetBranchStatus("*", 0);
    fReader = new TTreeReader(fChain);

    string json_path = string(getenv("SKNANO_DATA")) + "/" + DataEra.Data() + "/Trigger/HLT_Path.json";
    ifstream json_file(json_path);
    if (json_file.is_open())
    {
        cout << "[SKNanoLoader::Init] Loading HLT Paths in" << json_path << endl;
        json j;
        json_file >> j;
        RVec<TString> not_in_tree;
        for (auto &[key, value] : j.items())
        {
            cout << "[SKNanoLoader::Init] HLT Path: " << key << endl;
            Bool_t *passHLT = new Bool_t();
            TString key_str = key;
            TriggerMap[key_str].first = passHLT;
            TriggerMap[key_str].second = value["lumi"];
            // if key_str is in tree, set branch address
            if (fChain->GetBranch(key_str))
            {
                SafeSetBranchAddress(key_str, TriggerMap[key_str].first);
            }
            else if (key_str == "Full")
            {
                *TriggerMap[key_str].first = true;
            }
            else
            {
                not_in_tree.push_back(key_str);
                TriggerMap.erase(key_str);
            }
        }
        if (not_in_tree.size() > 0)
        {
            // print in yellow color
            cout << "\033[1;33m[SKNanoLoader::Init] Following HLT Paths are not in the tree\033[0m" << endl;
            for (auto &path : not_in_tree)
            {
                cout << "\033[1;33m" << path << "\033[0m" << endl;
            }
        }
    }
    else
        cerr << "[SKNanoLoader::Init] Cannot open " << json_path << endl;
}

void SKNanoLoader::InitBranch()
{
    // Electron
    Electron_IPx_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_IPx");
    Electron_IPx = *Electron_IPx_Ptr;
    Electron_IPy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_IPy");
    Electron_IPy = *Electron_IPy_Ptr;
    Electron_IPz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_IPz");
    Electron_IPz = *Electron_IPz_Ptr;
    Electron_PreshowerEnergy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_PreshowerEnergy");
    Electron_PreshowerEnergy = *Electron_PreshowerEnergy_Ptr;
    Electron_charge_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Electron_charge");
    Electron_charge = *Electron_charge_Ptr;
    Electron_convVeto_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_convVeto");
    Electron_convVeto = *Electron_convVeto_Ptr;
    Electron_cutBased_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Electron_cutBased");
    Electron_cutBased = *Electron_cutBased_Ptr;
    Electron_cutBased_HEEP_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_cutBased_HEEP");
    Electron_cutBased_HEEP = *Electron_cutBased_HEEP_Ptr;
    Electron_deltaEtaSC_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_deltaEtaSC");
    Electron_deltaEtaSC = *Electron_deltaEtaSC_Ptr;
    Electron_dr03EcalRecHitSumEt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dr03EcalRecHitSumEt");
    Electron_dr03EcalRecHitSumEt = *Electron_dr03EcalRecHitSumEt_Ptr;
    Electron_dr03HcalDepth1TowerSumEt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dr03HcalDepth1TowerSumEt");
    Electron_dr03HcalDepth1TowerSumEt = *Electron_dr03HcalDepth1TowerSumEt_Ptr;
    Electron_dr03TkSumPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dr03TkSumPt");
    Electron_dr03TkSumPt = *Electron_dr03TkSumPt_Ptr;
    Electron_dr03TkSumPtHEEP_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dr03TkSumPtHEEP");
    Electron_dr03TkSumPtHEEP = *Electron_dr03TkSumPtHEEP_Ptr;
    Electron_dxy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dxy");
    Electron_dxy = *Electron_dxy_Ptr;
    Electron_dxyErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dxyErr");
    Electron_dxyErr = *Electron_dxyErr_Ptr;
    Electron_dz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dz");
    Electron_dz = *Electron_dz_Ptr;
    Electron_dzErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_dzErr");
    Electron_dzErr = *Electron_dzErr_Ptr;
    Electron_eInvMinusPInv_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_eInvMinusPInv");
    Electron_eInvMinusPInv = *Electron_eInvMinusPInv_Ptr;
    Electron_ecalEnergy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_ecalEnergy");
    Electron_ecalEnergy = *Electron_ecalEnergy_Ptr;
    Electron_ecalEnergyError_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_ecalEnergyError");
    Electron_ecalEnergyError = *Electron_ecalEnergyError_Ptr;
    Electron_energyErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_energyErr");
    Electron_energyErr = *Electron_energyErr_Ptr;
    Electron_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_eta");
    Electron_eta = *Electron_eta_Ptr;
    Electron_fbrem_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_fbrem");
    Electron_fbrem = *Electron_fbrem_Ptr;
    Electron_fsrPhotonIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Electron_fsrPhotonIdx");
    Electron_fsrPhotonIdx = *Electron_fsrPhotonIdx_Ptr;
    Electron_genPartFlav_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Electron_genPartFlav");
    Electron_genPartFlav = *Electron_genPartFlav_Ptr;
    Electron_genPartIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Electron_genPartIdx");
    Electron_genPartIdx = *Electron_genPartIdx_Ptr;
    Electron_gsfTrketaMode_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_gsfTrketaMode");
    Electron_gsfTrketaMode = *Electron_gsfTrketaMode_Ptr;
    Electron_gsfTrkpMode_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_gsfTrkpMode");
    Electron_gsfTrkpMode = *Electron_gsfTrkpMode_Ptr;
    Electron_gsfTrkpModeErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_gsfTrkpModeErr");
    Electron_gsfTrkpModeErr = *Electron_gsfTrkpModeErr_Ptr;
    Electron_gsfTrkphiMode_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_gsfTrkphiMode");
    Electron_gsfTrkphiMode = *Electron_gsfTrkphiMode_Ptr;
    Electron_hoe_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_hoe");
    Electron_hoe = *Electron_hoe_Ptr;
    Electron_ip3d_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_ip3d");
    Electron_ip3d = *Electron_ip3d_Ptr;
    Electron_ipLengthSig_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_ipLengthSig");
    Electron_ipLengthSig = *Electron_ipLengthSig_Ptr;
    Electron_isEB_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_isEB");
    Electron_isEB = *Electron_isEB_Ptr;
    Electron_isEcalDriven_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_isEcalDriven");
    Electron_isEcalDriven = *Electron_isEcalDriven_Ptr;
    Electron_isPFcand_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_isPFcand");
    Electron_isPFcand = *Electron_isPFcand_Ptr;
    Electron_jetDF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_jetDF");
    Electron_jetDF = *Electron_jetDF_Ptr;
    Electron_jetIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Electron_jetIdx");
    Electron_jetIdx = *Electron_jetIdx_Ptr;
    Electron_jetNDauCharged_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Electron_jetNDauCharged");
    Electron_jetNDauCharged = *Electron_jetNDauCharged_Ptr;
    Electron_jetPtRelv2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_jetPtRelv2");
    Electron_jetPtRelv2 = *Electron_jetPtRelv2_Ptr;
    Electron_jetRelIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_jetRelIso");
    Electron_jetRelIso = *Electron_jetRelIso_Ptr;
    Electron_lostHits_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Electron_lostHits");
    Electron_lostHits = *Electron_lostHits_Ptr;
    Electron_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_mass");
    Electron_mass = *Electron_mass_Ptr;
    Electron_miniPFRelIso_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_miniPFRelIso_all");
    Electron_miniPFRelIso_all = *Electron_miniPFRelIso_all_Ptr;
    Electron_miniPFRelIso_chg_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_miniPFRelIso_chg");
    Electron_miniPFRelIso_chg = *Electron_miniPFRelIso_chg_Ptr;
    Electron_mvaHZZIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_mvaHZZIso");
    Electron_mvaHZZIso = *Electron_mvaHZZIso_Ptr;
    Electron_mvaIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_mvaIso");
    Electron_mvaIso = *Electron_mvaIso_Ptr;
    Electron_mvaIso_WP80_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_mvaIso_WP80");
    Electron_mvaIso_WP80 = *Electron_mvaIso_WP80_Ptr;
    Electron_mvaIso_WP90_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_mvaIso_WP90");
    Electron_mvaIso_WP90 = *Electron_mvaIso_WP90_Ptr;
    Electron_mvaIso_WPHZZ_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_mvaIso_WPHZZ");
    Electron_mvaIso_WPHZZ = *Electron_mvaIso_WPHZZ_Ptr;
    Electron_mvaNoIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_mvaNoIso");
    Electron_mvaNoIso = *Electron_mvaNoIso_Ptr;
    Electron_mvaNoIso_WP80_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_mvaNoIso_WP80");
    Electron_mvaNoIso_WP80 = *Electron_mvaNoIso_WP80_Ptr;
    Electron_mvaNoIso_WP90_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Electron_mvaNoIso_WP90");
    Electron_mvaNoIso_WP90 = *Electron_mvaNoIso_WP90_Ptr;
    Electron_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Electron_pdgId");
    Electron_pdgId = *Electron_pdgId_Ptr;
    Electron_pfRelIso03_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_pfRelIso03_all");
    Electron_pfRelIso03_all = *Electron_pfRelIso03_all_Ptr;
    Electron_pfRelIso03_chg_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_pfRelIso03_chg");
    Electron_pfRelIso03_chg = *Electron_pfRelIso03_chg_Ptr;
    Electron_pfRelIso04_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_pfRelIso04_all");
    Electron_pfRelIso04_all = *Electron_pfRelIso04_all_Ptr;
    Electron_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_phi");
    Electron_phi = *Electron_phi_Ptr;
    Electron_photonIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Electron_photonIdx");
    Electron_photonIdx = *Electron_photonIdx_Ptr;
    Electron_promptMVA_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_promptMVA");
    Electron_promptMVA = *Electron_promptMVA_Ptr;
    Electron_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_pt");
    Electron_pt = *Electron_pt_Ptr;
    Electron_r9_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_r9");
    Electron_r9 = *Electron_r9_Ptr;
    Electron_rawEnergy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_rawEnergy");
    Electron_rawEnergy = *Electron_rawEnergy_Ptr;
    Electron_scEtOverPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_scEtOverPt");
    Electron_scEtOverPt = *Electron_scEtOverPt_Ptr;
    Electron_seedGain_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Electron_seedGain");
    Electron_seedGain = *Electron_seedGain_Ptr;
    Electron_seediEtaOriX_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Electron_seediEtaOriX");
    Electron_seediEtaOriX = *Electron_seediEtaOriX_Ptr;
    Electron_seediPhiOriY_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Electron_seediPhiOriY");
    Electron_seediPhiOriY = *Electron_seediPhiOriY_Ptr;
    Electron_sieie_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_sieie");
    Electron_sieie = *Electron_sieie_Ptr;
    Electron_sip3d_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_sip3d");
    Electron_sip3d = *Electron_sip3d_Ptr;
    Electron_superclusterEta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Electron_superclusterEta");
    Electron_superclusterEta = *Electron_superclusterEta_Ptr;
    Electron_svIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Electron_svIdx");
    Electron_svIdx = *Electron_svIdx_Ptr;
    Electron_tightCharge_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Electron_tightCharge");
    Electron_tightCharge = *Electron_tightCharge_Ptr;
    Electron_vidNestedWPBitmap_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Electron_vidNestedWPBitmap");
    Electron_vidNestedWPBitmap = *Electron_vidNestedWPBitmap_Ptr;
    Electron_vidNestedWPBitmapHEEP_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Electron_vidNestedWPBitmapHEEP");
    Electron_vidNestedWPBitmapHEEP = *Electron_vidNestedWPBitmapHEEP_Ptr;
    nElectron_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nElectron");
    nElectron = **nElectron_Ptr;

    // FatJet
    FatJet_area_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_area");
    FatJet_area = *FatJet_area_Ptr;
    FatJet_chEmEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_chEmEF");
    FatJet_chEmEF = *FatJet_chEmEF_Ptr;
    FatJet_chHEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_chHEF");
    FatJet_chHEF = *FatJet_chHEF_Ptr;
    FatJet_chMultiplicity_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FatJet_chMultiplicity");
    FatJet_chMultiplicity = *FatJet_chMultiplicity_Ptr;
    FatJet_electronIdx3SJ_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FatJet_electronIdx3SJ");
    FatJet_electronIdx3SJ = *FatJet_electronIdx3SJ_Ptr;
    FatJet_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_eta");
    FatJet_eta = *FatJet_eta_Ptr;
    FatJet_genJetAK8Idx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FatJet_genJetAK8Idx");
    FatJet_genJetAK8Idx = *FatJet_genJetAK8Idx_Ptr;
    FatJet_globalParT3_QCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_QCD");
    FatJet_globalParT3_QCD = *FatJet_globalParT3_QCD_Ptr;
    FatJet_globalParT3_TopbWev_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_TopbWev");
    FatJet_globalParT3_TopbWev = *FatJet_globalParT3_TopbWev_Ptr;
    FatJet_globalParT3_TopbWmv_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_TopbWmv");
    FatJet_globalParT3_TopbWmv = *FatJet_globalParT3_TopbWmv_Ptr;
    FatJet_globalParT3_TopbWq_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_TopbWq");
    FatJet_globalParT3_TopbWq = *FatJet_globalParT3_TopbWq_Ptr;
    FatJet_globalParT3_TopbWqq_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_TopbWqq");
    FatJet_globalParT3_TopbWqq = *FatJet_globalParT3_TopbWqq_Ptr;
    FatJet_globalParT3_TopbWtauhv_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_TopbWtauhv");
    FatJet_globalParT3_TopbWtauhv = *FatJet_globalParT3_TopbWtauhv_Ptr;
    FatJet_globalParT3_WvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_WvsQCD");
    FatJet_globalParT3_WvsQCD = *FatJet_globalParT3_WvsQCD_Ptr;
    FatJet_globalParT3_XWW3q_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_XWW3q");
    FatJet_globalParT3_XWW3q = *FatJet_globalParT3_XWW3q_Ptr;
    FatJet_globalParT3_XWW4q_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_XWW4q");
    FatJet_globalParT3_XWW4q = *FatJet_globalParT3_XWW4q_Ptr;
    FatJet_globalParT3_XWWqqev_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_XWWqqev");
    FatJet_globalParT3_XWWqqev = *FatJet_globalParT3_XWWqqev_Ptr;
    FatJet_globalParT3_XWWqqmv_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_XWWqqmv");
    FatJet_globalParT3_XWWqqmv = *FatJet_globalParT3_XWWqqmv_Ptr;
    FatJet_globalParT3_Xbb_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_Xbb");
    FatJet_globalParT3_Xbb = *FatJet_globalParT3_Xbb_Ptr;
    FatJet_globalParT3_Xcc_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_Xcc");
    FatJet_globalParT3_Xcc = *FatJet_globalParT3_Xcc_Ptr;
    FatJet_globalParT3_Xcs_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_Xcs");
    FatJet_globalParT3_Xcs = *FatJet_globalParT3_Xcs_Ptr;
    FatJet_globalParT3_Xqq_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_Xqq");
    FatJet_globalParT3_Xqq = *FatJet_globalParT3_Xqq_Ptr;
    FatJet_globalParT3_Xtauhtaue_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_Xtauhtaue");
    FatJet_globalParT3_Xtauhtaue = *FatJet_globalParT3_Xtauhtaue_Ptr;
    FatJet_globalParT3_Xtauhtauh_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_Xtauhtauh");
    FatJet_globalParT3_Xtauhtauh = *FatJet_globalParT3_Xtauhtauh_Ptr;
    FatJet_globalParT3_Xtauhtaum_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_Xtauhtaum");
    FatJet_globalParT3_Xtauhtaum = *FatJet_globalParT3_Xtauhtaum_Ptr;
    FatJet_globalParT3_massCorrGeneric_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_massCorrGeneric");
    FatJet_globalParT3_massCorrGeneric = *FatJet_globalParT3_massCorrGeneric_Ptr;
    FatJet_globalParT3_massCorrX2p_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_massCorrX2p");
    FatJet_globalParT3_massCorrX2p = *FatJet_globalParT3_massCorrX2p_Ptr;
    FatJet_globalParT3_withMassTopvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_withMassTopvsQCD");
    FatJet_globalParT3_withMassTopvsQCD = *FatJet_globalParT3_withMassTopvsQCD_Ptr;
    FatJet_globalParT3_withMassWvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_withMassWvsQCD");
    FatJet_globalParT3_withMassWvsQCD = *FatJet_globalParT3_withMassWvsQCD_Ptr;
    FatJet_globalParT3_withMassZvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_globalParT3_withMassZvsQCD");
    FatJet_globalParT3_withMassZvsQCD = *FatJet_globalParT3_withMassZvsQCD_Ptr;
    FatJet_hadronFlavour_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "FatJet_hadronFlavour");
    FatJet_hadronFlavour = *FatJet_hadronFlavour_Ptr;
    FatJet_hfEmEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_hfEmEF");
    FatJet_hfEmEF = *FatJet_hfEmEF_Ptr;
    FatJet_hfHEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_hfHEF");
    FatJet_hfHEF = *FatJet_hfHEF_Ptr;
    FatJet_lsf3_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_lsf3");
    FatJet_lsf3 = *FatJet_lsf3_Ptr;
    FatJet_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_mass");
    FatJet_mass = *FatJet_mass_Ptr;
    FatJet_msoftdrop_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_msoftdrop");
    FatJet_msoftdrop = *FatJet_msoftdrop_Ptr;
    FatJet_muEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_muEF");
    FatJet_muEF = *FatJet_muEF_Ptr;
    FatJet_muonIdx3SJ_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FatJet_muonIdx3SJ");
    FatJet_muonIdx3SJ = *FatJet_muonIdx3SJ_Ptr;
    FatJet_n2b1_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_n2b1");
    FatJet_n2b1 = *FatJet_n2b1_Ptr;
    FatJet_n3b1_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_n3b1");
    FatJet_n3b1 = *FatJet_n3b1_Ptr;
    FatJet_nConstituents_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "FatJet_nConstituents");
    FatJet_nConstituents = *FatJet_nConstituents_Ptr;
    FatJet_neEmEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_neEmEF");
    FatJet_neEmEF = *FatJet_neEmEF_Ptr;
    FatJet_neHEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_neHEF");
    FatJet_neHEF = *FatJet_neHEF_Ptr;
    FatJet_neMultiplicity_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FatJet_neMultiplicity");
    FatJet_neMultiplicity = *FatJet_neMultiplicity_Ptr;
    FatJet_particleNetLegacy_QCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetLegacy_QCD");
    FatJet_particleNetLegacy_QCD = *FatJet_particleNetLegacy_QCD_Ptr;
    FatJet_particleNetLegacy_Xbb_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetLegacy_Xbb");
    FatJet_particleNetLegacy_Xbb = *FatJet_particleNetLegacy_Xbb_Ptr;
    FatJet_particleNetLegacy_Xcc_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetLegacy_Xcc");
    FatJet_particleNetLegacy_Xcc = *FatJet_particleNetLegacy_Xcc_Ptr;
    FatJet_particleNetLegacy_Xqq_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetLegacy_Xqq");
    FatJet_particleNetLegacy_Xqq = *FatJet_particleNetLegacy_Xqq_Ptr;
    FatJet_particleNetLegacy_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetLegacy_mass");
    FatJet_particleNetLegacy_mass = *FatJet_particleNetLegacy_mass_Ptr;
    FatJet_particleNetWithMass_H4qvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetWithMass_H4qvsQCD");
    FatJet_particleNetWithMass_H4qvsQCD = *FatJet_particleNetWithMass_H4qvsQCD_Ptr;
    FatJet_particleNetWithMass_HbbvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetWithMass_HbbvsQCD");
    FatJet_particleNetWithMass_HbbvsQCD = *FatJet_particleNetWithMass_HbbvsQCD_Ptr;
    FatJet_particleNetWithMass_HccvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetWithMass_HccvsQCD");
    FatJet_particleNetWithMass_HccvsQCD = *FatJet_particleNetWithMass_HccvsQCD_Ptr;
    FatJet_particleNetWithMass_QCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetWithMass_QCD");
    FatJet_particleNetWithMass_QCD = *FatJet_particleNetWithMass_QCD_Ptr;
    FatJet_particleNetWithMass_TvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetWithMass_TvsQCD");
    FatJet_particleNetWithMass_TvsQCD = *FatJet_particleNetWithMass_TvsQCD_Ptr;
    FatJet_particleNetWithMass_WvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetWithMass_WvsQCD");
    FatJet_particleNetWithMass_WvsQCD = *FatJet_particleNetWithMass_WvsQCD_Ptr;
    FatJet_particleNetWithMass_ZvsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNetWithMass_ZvsQCD");
    FatJet_particleNetWithMass_ZvsQCD = *FatJet_particleNetWithMass_ZvsQCD_Ptr;
    FatJet_particleNet_QCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_QCD");
    FatJet_particleNet_QCD = *FatJet_particleNet_QCD_Ptr;
    FatJet_particleNet_QCD0HF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_QCD0HF");
    FatJet_particleNet_QCD0HF = *FatJet_particleNet_QCD0HF_Ptr;
    FatJet_particleNet_QCD1HF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_QCD1HF");
    FatJet_particleNet_QCD1HF = *FatJet_particleNet_QCD1HF_Ptr;
    FatJet_particleNet_QCD2HF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_QCD2HF");
    FatJet_particleNet_QCD2HF = *FatJet_particleNet_QCD2HF_Ptr;
    FatJet_particleNet_WVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_WVsQCD");
    FatJet_particleNet_WVsQCD = *FatJet_particleNet_WVsQCD_Ptr;
    FatJet_particleNet_XbbVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_XbbVsQCD");
    FatJet_particleNet_XbbVsQCD = *FatJet_particleNet_XbbVsQCD_Ptr;
    FatJet_particleNet_XccVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_XccVsQCD");
    FatJet_particleNet_XccVsQCD = *FatJet_particleNet_XccVsQCD_Ptr;
    FatJet_particleNet_XggVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_XggVsQCD");
    FatJet_particleNet_XggVsQCD = *FatJet_particleNet_XggVsQCD_Ptr;
    FatJet_particleNet_XqqVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_XqqVsQCD");
    FatJet_particleNet_XqqVsQCD = *FatJet_particleNet_XqqVsQCD_Ptr;
    FatJet_particleNet_XteVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_XteVsQCD");
    FatJet_particleNet_XteVsQCD = *FatJet_particleNet_XteVsQCD_Ptr;
    FatJet_particleNet_XtmVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_XtmVsQCD");
    FatJet_particleNet_XtmVsQCD = *FatJet_particleNet_XtmVsQCD_Ptr;
    FatJet_particleNet_XttVsQCD_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_XttVsQCD");
    FatJet_particleNet_XttVsQCD = *FatJet_particleNet_XttVsQCD_Ptr;
    FatJet_particleNet_massCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_particleNet_massCorr");
    FatJet_particleNet_massCorr = *FatJet_particleNet_massCorr_Ptr;
    FatJet_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_phi");
    FatJet_phi = *FatJet_phi_Ptr;
    FatJet_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_pt");
    FatJet_pt = *FatJet_pt_Ptr;
    FatJet_rawFactor_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_rawFactor");
    FatJet_rawFactor = *FatJet_rawFactor_Ptr;
    FatJet_subJetIdx1_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FatJet_subJetIdx1");
    FatJet_subJetIdx1 = *FatJet_subJetIdx1_Ptr;
    FatJet_subJetIdx2_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FatJet_subJetIdx2");
    FatJet_subJetIdx2 = *FatJet_subJetIdx2_Ptr;
    FatJet_tau1_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_tau1");
    FatJet_tau1 = *FatJet_tau1_Ptr;
    FatJet_tau2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_tau2");
    FatJet_tau2 = *FatJet_tau2_Ptr;
    FatJet_tau3_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_tau3");
    FatJet_tau3 = *FatJet_tau3_Ptr;
    FatJet_tau4_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FatJet_tau4");
    FatJet_tau4 = *FatJet_tau4_Ptr;
    nFatJet_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nFatJet");
    nFatJet = **nFatJet_Ptr;

    // FatJetPFCand
    FatJetPFCand_jetIdx_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "FatJetPFCand_jetIdx");
    FatJetPFCand_jetIdx = *FatJetPFCand_jetIdx_Ptr;
    FatJetPFCand_pfCandIdx_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "FatJetPFCand_pfCandIdx");
    FatJetPFCand_pfCandIdx = *FatJetPFCand_pfCandIdx_Ptr;
    nFatJetPFCand_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nFatJetPFCand");
    nFatJetPFCand = **nFatJetPFCand_Ptr;

    // Flag
    Flag_BadChargedCandidateFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_BadChargedCandidateFilter");
    Flag_BadChargedCandidateFilter = **Flag_BadChargedCandidateFilter_Ptr;
    Flag_BadChargedCandidateSummer16Filter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_BadChargedCandidateSummer16Filter");
    Flag_BadChargedCandidateSummer16Filter = **Flag_BadChargedCandidateSummer16Filter_Ptr;
    Flag_BadPFMuonDzFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_BadPFMuonDzFilter");
    Flag_BadPFMuonDzFilter = **Flag_BadPFMuonDzFilter_Ptr;
    Flag_BadPFMuonFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_BadPFMuonFilter");
    Flag_BadPFMuonFilter = **Flag_BadPFMuonFilter_Ptr;
    Flag_BadPFMuonSummer16Filter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_BadPFMuonSummer16Filter");
    Flag_BadPFMuonSummer16Filter = **Flag_BadPFMuonSummer16Filter_Ptr;
    Flag_CSCTightHalo2015Filter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_CSCTightHalo2015Filter");
    Flag_CSCTightHalo2015Filter = **Flag_CSCTightHalo2015Filter_Ptr;
    Flag_CSCTightHaloFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_CSCTightHaloFilter");
    Flag_CSCTightHaloFilter = **Flag_CSCTightHaloFilter_Ptr;
    Flag_CSCTightHaloTrkMuUnvetoFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_CSCTightHaloTrkMuUnvetoFilter");
    Flag_CSCTightHaloTrkMuUnvetoFilter = **Flag_CSCTightHaloTrkMuUnvetoFilter_Ptr;
    Flag_EcalDeadCellBoundaryEnergyFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_EcalDeadCellBoundaryEnergyFilter");
    Flag_EcalDeadCellBoundaryEnergyFilter = **Flag_EcalDeadCellBoundaryEnergyFilter_Ptr;
    Flag_EcalDeadCellTriggerPrimitiveFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_EcalDeadCellTriggerPrimitiveFilter");
    Flag_EcalDeadCellTriggerPrimitiveFilter = **Flag_EcalDeadCellTriggerPrimitiveFilter_Ptr;
    Flag_HBHENoiseFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_HBHENoiseFilter");
    Flag_HBHENoiseFilter = **Flag_HBHENoiseFilter_Ptr;
    Flag_HBHENoiseIsoFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_HBHENoiseIsoFilter");
    Flag_HBHENoiseIsoFilter = **Flag_HBHENoiseIsoFilter_Ptr;
    Flag_HcalStripHaloFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_HcalStripHaloFilter");
    Flag_HcalStripHaloFilter = **Flag_HcalStripHaloFilter_Ptr;
    Flag_chargedHadronTrackResolutionFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_chargedHadronTrackResolutionFilter");
    Flag_chargedHadronTrackResolutionFilter = **Flag_chargedHadronTrackResolutionFilter_Ptr;
    Flag_ecalBadCalibFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_ecalBadCalibFilter");
    Flag_ecalBadCalibFilter = **Flag_ecalBadCalibFilter_Ptr;
    Flag_ecalLaserCorrFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_ecalLaserCorrFilter");
    Flag_ecalLaserCorrFilter = **Flag_ecalLaserCorrFilter_Ptr;
    Flag_eeBadScFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_eeBadScFilter");
    Flag_eeBadScFilter = **Flag_eeBadScFilter_Ptr;
    Flag_globalSuperTightHalo2016Filter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_globalSuperTightHalo2016Filter");
    Flag_globalSuperTightHalo2016Filter = **Flag_globalSuperTightHalo2016Filter_Ptr;
    Flag_globalTightHalo2016Filter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_globalTightHalo2016Filter");
    Flag_globalTightHalo2016Filter = **Flag_globalTightHalo2016Filter_Ptr;
    Flag_goodVertices_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_goodVertices");
    Flag_goodVertices = **Flag_goodVertices_Ptr;
    Flag_hcalLaserEventFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_hcalLaserEventFilter");
    Flag_hcalLaserEventFilter = **Flag_hcalLaserEventFilter_Ptr;
    Flag_hfNoisyHitsFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_hfNoisyHitsFilter");
    Flag_hfNoisyHitsFilter = **Flag_hfNoisyHitsFilter_Ptr;
    Flag_muonBadTrackFilter_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_muonBadTrackFilter");
    Flag_muonBadTrackFilter = **Flag_muonBadTrackFilter_Ptr;
    Flag_trkPOGFilters_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_trkPOGFilters");
    Flag_trkPOGFilters = **Flag_trkPOGFilters_Ptr;
    Flag_trkPOG_logErrorTooManyClusters_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_trkPOG_logErrorTooManyClusters");
    Flag_trkPOG_logErrorTooManyClusters = **Flag_trkPOG_logErrorTooManyClusters_Ptr;
    Flag_trkPOG_manystripclus53X_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_trkPOG_manystripclus53X");
    Flag_trkPOG_manystripclus53X = **Flag_trkPOG_manystripclus53X_Ptr;
    Flag_trkPOG_toomanystripclus53X_Ptr = std::make_unique<TTreeReaderValue<Bool_t>>(*fReader, "Flag_trkPOG_toomanystripclus53X");
    Flag_trkPOG_toomanystripclus53X = **Flag_trkPOG_toomanystripclus53X_Ptr;

    // FsrPhoton
    FsrPhoton_dROverEt2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FsrPhoton_dROverEt2");
    FsrPhoton_dROverEt2 = *FsrPhoton_dROverEt2_Ptr;
    FsrPhoton_electronIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FsrPhoton_electronIdx");
    FsrPhoton_electronIdx = *FsrPhoton_electronIdx_Ptr;
    FsrPhoton_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FsrPhoton_eta");
    FsrPhoton_eta = *FsrPhoton_eta_Ptr;
    FsrPhoton_muonIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "FsrPhoton_muonIdx");
    FsrPhoton_muonIdx = *FsrPhoton_muonIdx_Ptr;
    FsrPhoton_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FsrPhoton_phi");
    FsrPhoton_phi = *FsrPhoton_phi_Ptr;
    FsrPhoton_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FsrPhoton_pt");
    FsrPhoton_pt = *FsrPhoton_pt_Ptr;
    FsrPhoton_relIso03_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "FsrPhoton_relIso03");
    FsrPhoton_relIso03 = *FsrPhoton_relIso03_Ptr;
    nFsrPhoton_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nFsrPhoton");
    nFsrPhoton = **nFsrPhoton_Ptr;

    // GenDressedLepton
    GenDressedLepton_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenDressedLepton_eta");
    GenDressedLepton_eta = *GenDressedLepton_eta_Ptr;
    GenDressedLepton_hasTauAnc_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "GenDressedLepton_hasTauAnc");
    GenDressedLepton_hasTauAnc = *GenDressedLepton_hasTauAnc_Ptr;
    GenDressedLepton_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenDressedLepton_mass");
    GenDressedLepton_mass = *GenDressedLepton_mass_Ptr;
    GenDressedLepton_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "GenDressedLepton_pdgId");
    GenDressedLepton_pdgId = *GenDressedLepton_pdgId_Ptr;
    GenDressedLepton_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenDressedLepton_phi");
    GenDressedLepton_phi = *GenDressedLepton_phi_Ptr;
    GenDressedLepton_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenDressedLepton_pt");
    GenDressedLepton_pt = *GenDressedLepton_pt_Ptr;
    nGenDressedLepton_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nGenDressedLepton");
    nGenDressedLepton = **nGenDressedLepton_Ptr;

    // GenIsolatedPhoton
    GenIsolatedPhoton_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenIsolatedPhoton_eta");
    GenIsolatedPhoton_eta = *GenIsolatedPhoton_eta_Ptr;
    GenIsolatedPhoton_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenIsolatedPhoton_mass");
    GenIsolatedPhoton_mass = *GenIsolatedPhoton_mass_Ptr;
    GenIsolatedPhoton_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenIsolatedPhoton_phi");
    GenIsolatedPhoton_phi = *GenIsolatedPhoton_phi_Ptr;
    GenIsolatedPhoton_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenIsolatedPhoton_pt");
    GenIsolatedPhoton_pt = *GenIsolatedPhoton_pt_Ptr;
    nGenIsolatedPhoton_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nGenIsolatedPhoton");
    nGenIsolatedPhoton = **nGenIsolatedPhoton_Ptr;

    // GenJet
    GenJet_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJet_eta");
    GenJet_eta = *GenJet_eta_Ptr;
    GenJet_hadronFlavour_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "GenJet_hadronFlavour");
    GenJet_hadronFlavour = *GenJet_hadronFlavour_Ptr;
    GenJet_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJet_mass");
    GenJet_mass = *GenJet_mass_Ptr;
    GenJet_nBHadrons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "GenJet_nBHadrons");
    GenJet_nBHadrons = *GenJet_nBHadrons_Ptr;
    GenJet_nCHadrons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "GenJet_nCHadrons");
    GenJet_nCHadrons = *GenJet_nCHadrons_Ptr;
    GenJet_partonFlavour_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "GenJet_partonFlavour");
    GenJet_partonFlavour = *GenJet_partonFlavour_Ptr;
    GenJet_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJet_phi");
    GenJet_phi = *GenJet_phi_Ptr;
    GenJet_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJet_pt");
    GenJet_pt = *GenJet_pt_Ptr;
    nGenJet_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nGenJet");
    nGenJet = **nGenJet_Ptr;

    // GenJetAK8
    GenJetAK8_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJetAK8_eta");
    GenJetAK8_eta = *GenJetAK8_eta_Ptr;
    GenJetAK8_hadronFlavour_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "GenJetAK8_hadronFlavour");
    GenJetAK8_hadronFlavour = *GenJetAK8_hadronFlavour_Ptr;
    GenJetAK8_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJetAK8_mass");
    GenJetAK8_mass = *GenJetAK8_mass_Ptr;
    GenJetAK8_nBHadrons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "GenJetAK8_nBHadrons");
    GenJetAK8_nBHadrons = *GenJetAK8_nBHadrons_Ptr;
    GenJetAK8_nCHadrons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "GenJetAK8_nCHadrons");
    GenJetAK8_nCHadrons = *GenJetAK8_nCHadrons_Ptr;
    GenJetAK8_partonFlavour_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "GenJetAK8_partonFlavour");
    GenJetAK8_partonFlavour = *GenJetAK8_partonFlavour_Ptr;
    GenJetAK8_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJetAK8_phi");
    GenJetAK8_phi = *GenJetAK8_phi_Ptr;
    GenJetAK8_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenJetAK8_pt");
    GenJetAK8_pt = *GenJetAK8_pt_Ptr;
    nGenJetAK8_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nGenJetAK8");
    nGenJetAK8 = **nGenJetAK8_Ptr;

    // GenMET
    GenMET_phi_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "GenMET_phi");
    GenMET_phi = **GenMET_phi_Ptr;
    GenMET_pt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "GenMET_pt");
    GenMET_pt = **GenMET_pt_Ptr;

    // GenPart
    GenPart_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenPart_eta");
    GenPart_eta = *GenPart_eta_Ptr;
    GenPart_genPartIdxMother_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "GenPart_genPartIdxMother");
    GenPart_genPartIdxMother = *GenPart_genPartIdxMother_Ptr;
    GenPart_iso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenPart_iso");
    GenPart_iso = *GenPart_iso_Ptr;
    GenPart_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenPart_mass");
    GenPart_mass = *GenPart_mass_Ptr;
    GenPart_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "GenPart_pdgId");
    GenPart_pdgId = *GenPart_pdgId_Ptr;
    GenPart_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenPart_phi");
    GenPart_phi = *GenPart_phi_Ptr;
    GenPart_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenPart_pt");
    GenPart_pt = *GenPart_pt_Ptr;
    GenPart_status_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "GenPart_status");
    GenPart_status = *GenPart_status_Ptr;
    GenPart_statusFlags_Ptr = std::make_unique<TTreeReaderArray<UShort_t>>(*fReader, "GenPart_statusFlags");
    GenPart_statusFlags = *GenPart_statusFlags_Ptr;
    nGenPart_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nGenPart");
    nGenPart = **nGenPart_Ptr;

    // GenVisTau
    GenVisTau_charge_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "GenVisTau_charge");
    GenVisTau_charge = *GenVisTau_charge_Ptr;
    GenVisTau_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenVisTau_eta");
    GenVisTau_eta = *GenVisTau_eta_Ptr;
    GenVisTau_genPartIdxMother_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "GenVisTau_genPartIdxMother");
    GenVisTau_genPartIdxMother = *GenVisTau_genPartIdxMother_Ptr;
    GenVisTau_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenVisTau_mass");
    GenVisTau_mass = *GenVisTau_mass_Ptr;
    GenVisTau_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenVisTau_phi");
    GenVisTau_phi = *GenVisTau_phi_Ptr;
    GenVisTau_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "GenVisTau_pt");
    GenVisTau_pt = *GenVisTau_pt_Ptr;
    GenVisTau_status_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "GenVisTau_status");
    GenVisTau_status = *GenVisTau_status_Ptr;
    nGenVisTau_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nGenVisTau");
    nGenVisTau = **nGenVisTau_Ptr;

    // GenVtx
    GenVtx_t0_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "GenVtx_t0");
    GenVtx_t0 = **GenVtx_t0_Ptr;
    GenVtx_x_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "GenVtx_x");
    GenVtx_x = **GenVtx_x_Ptr;
    GenVtx_y_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "GenVtx_y");
    GenVtx_y = **GenVtx_y_Ptr;
    GenVtx_z_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "GenVtx_z");
    GenVtx_z = **GenVtx_z_Ptr;

    // Generator
    Generator_binvar_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Generator_binvar");
    Generator_binvar = **Generator_binvar_Ptr;
    Generator_id1_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "Generator_id1");
    Generator_id1 = **Generator_id1_Ptr;
    Generator_id2_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "Generator_id2");
    Generator_id2 = **Generator_id2_Ptr;
    Generator_scalePDF_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Generator_scalePDF");
    Generator_scalePDF = **Generator_scalePDF_Ptr;
    Generator_weight_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Generator_weight");
    Generator_weight = **Generator_weight_Ptr;
    Generator_x1_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Generator_x1");
    Generator_x1 = **Generator_x1_Ptr;
    Generator_x2_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Generator_x2");
    Generator_x2 = **Generator_x2_Ptr;
    Generator_xpdf1_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Generator_xpdf1");
    Generator_xpdf1 = **Generator_xpdf1_Ptr;
    Generator_xpdf2_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Generator_xpdf2");
    Generator_xpdf2 = **Generator_xpdf2_Ptr;

    // IsoTrack
    IsoTrack_charge_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "IsoTrack_charge");
    IsoTrack_charge = *IsoTrack_charge_Ptr;
    IsoTrack_dxy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_dxy");
    IsoTrack_dxy = *IsoTrack_dxy_Ptr;
    IsoTrack_dz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_dz");
    IsoTrack_dz = *IsoTrack_dz_Ptr;
    IsoTrack_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_eta");
    IsoTrack_eta = *IsoTrack_eta_Ptr;
    IsoTrack_fromPV_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "IsoTrack_fromPV");
    IsoTrack_fromPV = *IsoTrack_fromPV_Ptr;
    IsoTrack_isFromLostTrack_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "IsoTrack_isFromLostTrack");
    IsoTrack_isFromLostTrack = *IsoTrack_isFromLostTrack_Ptr;
    IsoTrack_isHighPurityTrack_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "IsoTrack_isHighPurityTrack");
    IsoTrack_isHighPurityTrack = *IsoTrack_isHighPurityTrack_Ptr;
    IsoTrack_isPFcand_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "IsoTrack_isPFcand");
    IsoTrack_isPFcand = *IsoTrack_isPFcand_Ptr;
    IsoTrack_miniPFRelIso_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_miniPFRelIso_all");
    IsoTrack_miniPFRelIso_all = *IsoTrack_miniPFRelIso_all_Ptr;
    IsoTrack_miniPFRelIso_chg_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_miniPFRelIso_chg");
    IsoTrack_miniPFRelIso_chg = *IsoTrack_miniPFRelIso_chg_Ptr;
    IsoTrack_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "IsoTrack_pdgId");
    IsoTrack_pdgId = *IsoTrack_pdgId_Ptr;
    IsoTrack_pfRelIso03_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_pfRelIso03_all");
    IsoTrack_pfRelIso03_all = *IsoTrack_pfRelIso03_all_Ptr;
    IsoTrack_pfRelIso03_chg_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_pfRelIso03_chg");
    IsoTrack_pfRelIso03_chg = *IsoTrack_pfRelIso03_chg_Ptr;
    IsoTrack_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_phi");
    IsoTrack_phi = *IsoTrack_phi_Ptr;
    IsoTrack_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "IsoTrack_pt");
    IsoTrack_pt = *IsoTrack_pt_Ptr;
    nIsoTrack_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nIsoTrack");
    nIsoTrack = **nIsoTrack_Ptr;

    // Jet
    Jet_PNetRegPtRawCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_PNetRegPtRawCorr");
    Jet_PNetRegPtRawCorr = *Jet_PNetRegPtRawCorr_Ptr;
    Jet_PNetRegPtRawCorrNeutrino_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_PNetRegPtRawCorrNeutrino");
    Jet_PNetRegPtRawCorrNeutrino = *Jet_PNetRegPtRawCorrNeutrino_Ptr;
    Jet_PNetRegPtRawRes_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_PNetRegPtRawRes");
    Jet_PNetRegPtRawRes = *Jet_PNetRegPtRawRes_Ptr;
    Jet_UParTAK4RegPtRawCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_UParTAK4RegPtRawCorr");
    Jet_UParTAK4RegPtRawCorr = *Jet_UParTAK4RegPtRawCorr_Ptr;
    Jet_UParTAK4RegPtRawCorrNeutrino_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_UParTAK4RegPtRawCorrNeutrino");
    Jet_UParTAK4RegPtRawCorrNeutrino = *Jet_UParTAK4RegPtRawCorrNeutrino_Ptr;
    Jet_UParTAK4RegPtRawRes_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_UParTAK4RegPtRawRes");
    Jet_UParTAK4RegPtRawRes = *Jet_UParTAK4RegPtRawRes_Ptr;
    Jet_UParTAK4V1RegPtRawCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_UParTAK4V1RegPtRawCorr");
    Jet_UParTAK4V1RegPtRawCorr = *Jet_UParTAK4V1RegPtRawCorr_Ptr;
    Jet_UParTAK4V1RegPtRawCorrNeutrino_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_UParTAK4V1RegPtRawCorrNeutrino");
    Jet_UParTAK4V1RegPtRawCorrNeutrino = *Jet_UParTAK4V1RegPtRawCorrNeutrino_Ptr;
    Jet_UParTAK4V1RegPtRawRes_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_UParTAK4V1RegPtRawRes");
    Jet_UParTAK4V1RegPtRawRes = *Jet_UParTAK4V1RegPtRawRes_Ptr;
    Jet_area_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_area");
    Jet_area = *Jet_area_Ptr;
    Jet_btagDeepFlavB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagDeepFlavB");
    Jet_btagDeepFlavB = *Jet_btagDeepFlavB_Ptr;
    Jet_btagDeepFlavCvB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagDeepFlavCvB");
    Jet_btagDeepFlavCvB = *Jet_btagDeepFlavCvB_Ptr;
    Jet_btagDeepFlavCvL_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagDeepFlavCvL");
    Jet_btagDeepFlavCvL = *Jet_btagDeepFlavCvL_Ptr;
    Jet_btagDeepFlavQG_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagDeepFlavQG");
    Jet_btagDeepFlavQG = *Jet_btagDeepFlavQG_Ptr;
    Jet_btagPNetB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagPNetB");
    Jet_btagPNetB = *Jet_btagPNetB_Ptr;
    Jet_btagPNetCvB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagPNetCvB");
    Jet_btagPNetCvB = *Jet_btagPNetCvB_Ptr;
    Jet_btagPNetCvL_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagPNetCvL");
    Jet_btagPNetCvL = *Jet_btagPNetCvL_Ptr;
    Jet_btagPNetCvNotB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagPNetCvNotB");
    Jet_btagPNetCvNotB = *Jet_btagPNetCvNotB_Ptr;
    Jet_btagPNetQvG_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagPNetQvG");
    Jet_btagPNetQvG = *Jet_btagPNetQvG_Ptr;
    Jet_btagPNetTauVJet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagPNetTauVJet");
    Jet_btagPNetTauVJet = *Jet_btagPNetTauVJet_Ptr;
    Jet_btagUParTAK4B_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4B");
    Jet_btagUParTAK4B = *Jet_btagUParTAK4B_Ptr;
    Jet_btagUParTAK4CvB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4CvB");
    Jet_btagUParTAK4CvB = *Jet_btagUParTAK4CvB_Ptr;
    Jet_btagUParTAK4CvL_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4CvL");
    Jet_btagUParTAK4CvL = *Jet_btagUParTAK4CvL_Ptr;
    Jet_btagUParTAK4CvNotB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4CvNotB");
    Jet_btagUParTAK4CvNotB = *Jet_btagUParTAK4CvNotB_Ptr;
    Jet_btagUParTAK4Ele_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4Ele");
    Jet_btagUParTAK4Ele = *Jet_btagUParTAK4Ele_Ptr;
    Jet_btagUParTAK4Mu_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4Mu");
    Jet_btagUParTAK4Mu = *Jet_btagUParTAK4Mu_Ptr;
    Jet_btagUParTAK4QvG_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4QvG");
    Jet_btagUParTAK4QvG = *Jet_btagUParTAK4QvG_Ptr;
    Jet_btagUParTAK4SvCB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4SvCB");
    Jet_btagUParTAK4SvCB = *Jet_btagUParTAK4SvCB_Ptr;
    Jet_btagUParTAK4SvUDG_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4SvUDG");
    Jet_btagUParTAK4SvUDG = *Jet_btagUParTAK4SvUDG_Ptr;
    Jet_btagUParTAK4TauVJet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4TauVJet");
    Jet_btagUParTAK4TauVJet = *Jet_btagUParTAK4TauVJet_Ptr;
    Jet_btagUParTAK4UDG_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4UDG");
    Jet_btagUParTAK4UDG = *Jet_btagUParTAK4UDG_Ptr;
    Jet_btagUParTAK4probb_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4probb");
    Jet_btagUParTAK4probb = *Jet_btagUParTAK4probb_Ptr;
    Jet_btagUParTAK4probbb_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_btagUParTAK4probbb");
    Jet_btagUParTAK4probbb = *Jet_btagUParTAK4probbb_Ptr;
    Jet_chEmEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_chEmEF");
    Jet_chEmEF = *Jet_chEmEF_Ptr;
    Jet_chHEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_chHEF");
    Jet_chHEF = *Jet_chHEF_Ptr;
    Jet_chMultiplicity_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Jet_chMultiplicity");
    Jet_chMultiplicity = *Jet_chMultiplicity_Ptr;
    Jet_electronIdx1_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_electronIdx1");
    Jet_electronIdx1 = *Jet_electronIdx1_Ptr;
    Jet_electronIdx2_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_electronIdx2");
    Jet_electronIdx2 = *Jet_electronIdx2_Ptr;
    Jet_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_eta");
    Jet_eta = *Jet_eta_Ptr;
    Jet_genJetIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_genJetIdx");
    Jet_genJetIdx = *Jet_genJetIdx_Ptr;
    Jet_hadronFlavour_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Jet_hadronFlavour");
    Jet_hadronFlavour = *Jet_hadronFlavour_Ptr;
    Jet_hfEmEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_hfEmEF");
    Jet_hfEmEF = *Jet_hfEmEF_Ptr;
    Jet_hfHEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_hfHEF");
    Jet_hfHEF = *Jet_hfHEF_Ptr;
    Jet_hfadjacentEtaStripsSize_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Jet_hfadjacentEtaStripsSize");
    Jet_hfadjacentEtaStripsSize = *Jet_hfadjacentEtaStripsSize_Ptr;
    Jet_hfcentralEtaStripSize_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Jet_hfcentralEtaStripSize");
    Jet_hfcentralEtaStripSize = *Jet_hfcentralEtaStripSize_Ptr;
    Jet_hfsigmaEtaEta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_hfsigmaEtaEta");
    Jet_hfsigmaEtaEta = *Jet_hfsigmaEtaEta_Ptr;
    Jet_hfsigmaPhiPhi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_hfsigmaPhiPhi");
    Jet_hfsigmaPhiPhi = *Jet_hfsigmaPhiPhi_Ptr;
    Jet_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_mass");
    Jet_mass = *Jet_mass_Ptr;
    Jet_muEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_muEF");
    Jet_muEF = *Jet_muEF_Ptr;
    Jet_muonIdx1_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_muonIdx1");
    Jet_muonIdx1 = *Jet_muonIdx1_Ptr;
    Jet_muonIdx2_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_muonIdx2");
    Jet_muonIdx2 = *Jet_muonIdx2_Ptr;
    Jet_muonSubtrDeltaEta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_muonSubtrDeltaEta");
    Jet_muonSubtrDeltaEta = *Jet_muonSubtrDeltaEta_Ptr;
    Jet_muonSubtrDeltaPhi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_muonSubtrDeltaPhi");
    Jet_muonSubtrDeltaPhi = *Jet_muonSubtrDeltaPhi_Ptr;
    Jet_muonSubtrFactor_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_muonSubtrFactor");
    Jet_muonSubtrFactor = *Jet_muonSubtrFactor_Ptr;
    Jet_nConstituents_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Jet_nConstituents");
    Jet_nConstituents = *Jet_nConstituents_Ptr;
    Jet_nElectrons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Jet_nElectrons");
    Jet_nElectrons = *Jet_nElectrons_Ptr;
    Jet_nMuons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Jet_nMuons");
    Jet_nMuons = *Jet_nMuons_Ptr;
    Jet_nSVs_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Jet_nSVs");
    Jet_nSVs = *Jet_nSVs_Ptr;
    Jet_neEmEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_neEmEF");
    Jet_neEmEF = *Jet_neEmEF_Ptr;
    Jet_neHEF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_neHEF");
    Jet_neHEF = *Jet_neHEF_Ptr;
    Jet_neMultiplicity_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Jet_neMultiplicity");
    Jet_neMultiplicity = *Jet_neMultiplicity_Ptr;
    Jet_partonFlavour_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_partonFlavour");
    Jet_partonFlavour = *Jet_partonFlavour_Ptr;
    Jet_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_phi");
    Jet_phi = *Jet_phi_Ptr;
    Jet_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_pt");
    Jet_pt = *Jet_pt_Ptr;
    Jet_puIdDisc_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_puIdDisc");
    Jet_puIdDisc = *Jet_puIdDisc_Ptr;
    Jet_rawFactor_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Jet_rawFactor");
    Jet_rawFactor = *Jet_rawFactor_Ptr;
    Jet_svIdx1_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_svIdx1");
    Jet_svIdx1 = *Jet_svIdx1_Ptr;
    Jet_svIdx2_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Jet_svIdx2");
    Jet_svIdx2 = *Jet_svIdx2_Ptr;
    nJet_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nJet");
    nJet = **nJet_Ptr;

    // LHE
    LHE_AlphaS_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "LHE_AlphaS");
    LHE_AlphaS = **LHE_AlphaS_Ptr;
    LHE_HT_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "LHE_HT");
    LHE_HT = **LHE_HT_Ptr;
    LHE_HTIncoming_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "LHE_HTIncoming");
    LHE_HTIncoming = **LHE_HTIncoming_Ptr;
    LHE_Nb_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "LHE_Nb");
    LHE_Nb = **LHE_Nb_Ptr;
    LHE_Nc_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "LHE_Nc");
    LHE_Nc = **LHE_Nc_Ptr;
    LHE_Nglu_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "LHE_Nglu");
    LHE_Nglu = **LHE_Nglu_Ptr;
    LHE_Njets_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "LHE_Njets");
    LHE_Njets = **LHE_Njets_Ptr;
    LHE_NpLO_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "LHE_NpLO");
    LHE_NpLO = **LHE_NpLO_Ptr;
    LHE_NpNLO_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "LHE_NpNLO");
    LHE_NpNLO = **LHE_NpNLO_Ptr;
    LHE_Nuds_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "LHE_Nuds");
    LHE_Nuds = **LHE_Nuds_Ptr;
    LHE_Vpt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "LHE_Vpt");
    LHE_Vpt = **LHE_Vpt_Ptr;

    // LHEPart
    LHEPart_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEPart_eta");
    LHEPart_eta = *LHEPart_eta_Ptr;
    LHEPart_firstMotherIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "LHEPart_firstMotherIdx");
    LHEPart_firstMotherIdx = *LHEPart_firstMotherIdx_Ptr;
    LHEPart_incomingpz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEPart_incomingpz");
    LHEPart_incomingpz = *LHEPart_incomingpz_Ptr;
    LHEPart_lastMotherIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "LHEPart_lastMotherIdx");
    LHEPart_lastMotherIdx = *LHEPart_lastMotherIdx_Ptr;
    LHEPart_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEPart_mass");
    LHEPart_mass = *LHEPart_mass_Ptr;
    LHEPart_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "LHEPart_pdgId");
    LHEPart_pdgId = *LHEPart_pdgId_Ptr;
    LHEPart_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEPart_phi");
    LHEPart_phi = *LHEPart_phi_Ptr;
    LHEPart_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEPart_pt");
    LHEPart_pt = *LHEPart_pt_Ptr;
    LHEPart_spin_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "LHEPart_spin");
    LHEPart_spin = *LHEPart_spin_Ptr;
    LHEPart_status_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "LHEPart_status");
    LHEPart_status = *LHEPart_status_Ptr;
    nLHEPart_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nLHEPart");
    nLHEPart = **nLHEPart_Ptr;

    // LHEPdfWeight
    LHEPdfWeight_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEPdfWeight");
    LHEPdfWeight = *LHEPdfWeight_Ptr;
    nLHEPdfWeight_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nLHEPdfWeight");
    nLHEPdfWeight = **nLHEPdfWeight_Ptr;

    // LHEReweightingWeight
    LHEReweightingWeight_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEReweightingWeight");
    LHEReweightingWeight = *LHEReweightingWeight_Ptr;
    nLHEReweightingWeight_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nLHEReweightingWeight");
    nLHEReweightingWeight = **nLHEReweightingWeight_Ptr;

    // LHEScaleWeight
    LHEScaleWeight_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LHEScaleWeight");
    LHEScaleWeight = *LHEScaleWeight_Ptr;
    nLHEScaleWeight_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nLHEScaleWeight");
    nLHEScaleWeight = **nLHEScaleWeight_Ptr;

    // LHEWeight
    LHEWeight_originalXWGTUP_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "LHEWeight_originalXWGTUP");
    LHEWeight_originalXWGTUP = **LHEWeight_originalXWGTUP_Ptr;

    // LowPtElectron
    LowPtElectron_ID_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_ID");
    LowPtElectron_ID = *LowPtElectron_ID_Ptr;
    LowPtElectron_charge_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "LowPtElectron_charge");
    LowPtElectron_charge = *LowPtElectron_charge_Ptr;
    LowPtElectron_convVeto_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "LowPtElectron_convVeto");
    LowPtElectron_convVeto = *LowPtElectron_convVeto_Ptr;
    LowPtElectron_convVtxRadius_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_convVtxRadius");
    LowPtElectron_convVtxRadius = *LowPtElectron_convVtxRadius_Ptr;
    LowPtElectron_convWP_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "LowPtElectron_convWP");
    LowPtElectron_convWP = *LowPtElectron_convWP_Ptr;
    LowPtElectron_deltaEtaSC_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_deltaEtaSC");
    LowPtElectron_deltaEtaSC = *LowPtElectron_deltaEtaSC_Ptr;
    LowPtElectron_dxy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_dxy");
    LowPtElectron_dxy = *LowPtElectron_dxy_Ptr;
    LowPtElectron_dxyErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_dxyErr");
    LowPtElectron_dxyErr = *LowPtElectron_dxyErr_Ptr;
    LowPtElectron_dz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_dz");
    LowPtElectron_dz = *LowPtElectron_dz_Ptr;
    LowPtElectron_dzErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_dzErr");
    LowPtElectron_dzErr = *LowPtElectron_dzErr_Ptr;
    LowPtElectron_eInvMinusPInv_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_eInvMinusPInv");
    LowPtElectron_eInvMinusPInv = *LowPtElectron_eInvMinusPInv_Ptr;
    LowPtElectron_electronIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "LowPtElectron_electronIdx");
    LowPtElectron_electronIdx = *LowPtElectron_electronIdx_Ptr;
    LowPtElectron_energyErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_energyErr");
    LowPtElectron_energyErr = *LowPtElectron_energyErr_Ptr;
    LowPtElectron_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_eta");
    LowPtElectron_eta = *LowPtElectron_eta_Ptr;
    LowPtElectron_genPartFlav_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "LowPtElectron_genPartFlav");
    LowPtElectron_genPartFlav = *LowPtElectron_genPartFlav_Ptr;
    LowPtElectron_genPartIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "LowPtElectron_genPartIdx");
    LowPtElectron_genPartIdx = *LowPtElectron_genPartIdx_Ptr;
    LowPtElectron_hoe_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_hoe");
    LowPtElectron_hoe = *LowPtElectron_hoe_Ptr;
    LowPtElectron_lostHits_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "LowPtElectron_lostHits");
    LowPtElectron_lostHits = *LowPtElectron_lostHits_Ptr;
    LowPtElectron_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_mass");
    LowPtElectron_mass = *LowPtElectron_mass_Ptr;
    LowPtElectron_miniPFRelIso_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_miniPFRelIso_all");
    LowPtElectron_miniPFRelIso_all = *LowPtElectron_miniPFRelIso_all_Ptr;
    LowPtElectron_miniPFRelIso_chg_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_miniPFRelIso_chg");
    LowPtElectron_miniPFRelIso_chg = *LowPtElectron_miniPFRelIso_chg_Ptr;
    LowPtElectron_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "LowPtElectron_pdgId");
    LowPtElectron_pdgId = *LowPtElectron_pdgId_Ptr;
    LowPtElectron_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_phi");
    LowPtElectron_phi = *LowPtElectron_phi_Ptr;
    LowPtElectron_photonIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "LowPtElectron_photonIdx");
    LowPtElectron_photonIdx = *LowPtElectron_photonIdx_Ptr;
    LowPtElectron_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_pt");
    LowPtElectron_pt = *LowPtElectron_pt_Ptr;
    LowPtElectron_ptbiased_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_ptbiased");
    LowPtElectron_ptbiased = *LowPtElectron_ptbiased_Ptr;
    LowPtElectron_r9_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_r9");
    LowPtElectron_r9 = *LowPtElectron_r9_Ptr;
    LowPtElectron_scEtOverPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_scEtOverPt");
    LowPtElectron_scEtOverPt = *LowPtElectron_scEtOverPt_Ptr;
    LowPtElectron_sieie_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_sieie");
    LowPtElectron_sieie = *LowPtElectron_sieie_Ptr;
    LowPtElectron_unbiased_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "LowPtElectron_unbiased");
    LowPtElectron_unbiased = *LowPtElectron_unbiased_Ptr;
    nLowPtElectron_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nLowPtElectron");
    nLowPtElectron = **nLowPtElectron_Ptr;

    // Muon
    Muon_IPx_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_IPx");
    Muon_IPx = *Muon_IPx_Ptr;
    Muon_IPy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_IPy");
    Muon_IPy = *Muon_IPy_Ptr;
    Muon_IPz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_IPz");
    Muon_IPz = *Muon_IPz_Ptr;
    Muon_VXBS_Cov00_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_VXBS_Cov00");
    Muon_VXBS_Cov00 = *Muon_VXBS_Cov00_Ptr;
    Muon_VXBS_Cov03_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_VXBS_Cov03");
    Muon_VXBS_Cov03 = *Muon_VXBS_Cov03_Ptr;
    Muon_VXBS_Cov33_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_VXBS_Cov33");
    Muon_VXBS_Cov33 = *Muon_VXBS_Cov33_Ptr;
    Muon_bestTrackType_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_bestTrackType");
    Muon_bestTrackType = *Muon_bestTrackType_Ptr;
    Muon_bsConstrainedChi2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_bsConstrainedChi2");
    Muon_bsConstrainedChi2 = *Muon_bsConstrainedChi2_Ptr;
    Muon_bsConstrainedPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_bsConstrainedPt");
    Muon_bsConstrainedPt = *Muon_bsConstrainedPt_Ptr;
    Muon_bsConstrainedPtErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_bsConstrainedPtErr");
    Muon_bsConstrainedPtErr = *Muon_bsConstrainedPtErr_Ptr;
    Muon_charge_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Muon_charge");
    Muon_charge = *Muon_charge_Ptr;
    Muon_dxy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_dxy");
    Muon_dxy = *Muon_dxy_Ptr;
    Muon_dxyErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_dxyErr");
    Muon_dxyErr = *Muon_dxyErr_Ptr;
    Muon_dxybs_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_dxybs");
    Muon_dxybs = *Muon_dxybs_Ptr;
    Muon_dxybsErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_dxybsErr");
    Muon_dxybsErr = *Muon_dxybsErr_Ptr;
    Muon_dz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_dz");
    Muon_dz = *Muon_dz_Ptr;
    Muon_dzErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_dzErr");
    Muon_dzErr = *Muon_dzErr_Ptr;
    Muon_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_eta");
    Muon_eta = *Muon_eta_Ptr;
    Muon_fsrPhotonIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Muon_fsrPhotonIdx");
    Muon_fsrPhotonIdx = *Muon_fsrPhotonIdx_Ptr;
    Muon_genPartFlav_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_genPartFlav");
    Muon_genPartFlav = *Muon_genPartFlav_Ptr;
    Muon_genPartIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Muon_genPartIdx");
    Muon_genPartIdx = *Muon_genPartIdx_Ptr;
    Muon_highPtId_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_highPtId");
    Muon_highPtId = *Muon_highPtId_Ptr;
    Muon_highPurity_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_highPurity");
    Muon_highPurity = *Muon_highPurity_Ptr;
    Muon_inTimeMuon_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_inTimeMuon");
    Muon_inTimeMuon = *Muon_inTimeMuon_Ptr;
    Muon_ip3d_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_ip3d");
    Muon_ip3d = *Muon_ip3d_Ptr;
    Muon_ipLengthSig_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_ipLengthSig");
    Muon_ipLengthSig = *Muon_ipLengthSig_Ptr;
    Muon_isGlobal_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_isGlobal");
    Muon_isGlobal = *Muon_isGlobal_Ptr;
    Muon_isPFcand_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_isPFcand");
    Muon_isPFcand = *Muon_isPFcand_Ptr;
    Muon_isStandalone_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_isStandalone");
    Muon_isStandalone = *Muon_isStandalone_Ptr;
    Muon_isTracker_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_isTracker");
    Muon_isTracker = *Muon_isTracker_Ptr;
    Muon_jetDF_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_jetDF");
    Muon_jetDF = *Muon_jetDF_Ptr;
    Muon_jetIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Muon_jetIdx");
    Muon_jetIdx = *Muon_jetIdx_Ptr;
    Muon_jetNDauCharged_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_jetNDauCharged");
    Muon_jetNDauCharged = *Muon_jetNDauCharged_Ptr;
    Muon_jetPtRelv2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_jetPtRelv2");
    Muon_jetPtRelv2 = *Muon_jetPtRelv2_Ptr;
    Muon_jetRelIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_jetRelIso");
    Muon_jetRelIso = *Muon_jetRelIso_Ptr;
    Muon_looseId_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_looseId");
    Muon_looseId = *Muon_looseId_Ptr;
    Muon_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_mass");
    Muon_mass = *Muon_mass_Ptr;
    Muon_mediumId_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_mediumId");
    Muon_mediumId = *Muon_mediumId_Ptr;
    Muon_mediumPromptId_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_mediumPromptId");
    Muon_mediumPromptId = *Muon_mediumPromptId_Ptr;
    Muon_miniIsoId_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_miniIsoId");
    Muon_miniIsoId = *Muon_miniIsoId_Ptr;
    Muon_miniPFRelIso_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_miniPFRelIso_all");
    Muon_miniPFRelIso_all = *Muon_miniPFRelIso_all_Ptr;
    Muon_miniPFRelIso_chg_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_miniPFRelIso_chg");
    Muon_miniPFRelIso_chg = *Muon_miniPFRelIso_chg_Ptr;
    Muon_multiIsoId_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_multiIsoId");
    Muon_multiIsoId = *Muon_multiIsoId_Ptr;
    Muon_mvaLowPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_mvaLowPt");
    Muon_mvaLowPt = *Muon_mvaLowPt_Ptr;
    Muon_mvaMuID_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_mvaMuID");
    Muon_mvaMuID = *Muon_mvaMuID_Ptr;
    Muon_mvaMuID_WP_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_mvaMuID_WP");
    Muon_mvaMuID_WP = *Muon_mvaMuID_WP_Ptr;
    Muon_nStations_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_nStations");
    Muon_nStations = *Muon_nStations_Ptr;
    Muon_nTrackerLayers_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_nTrackerLayers");
    Muon_nTrackerLayers = *Muon_nTrackerLayers_Ptr;
    Muon_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Muon_pdgId");
    Muon_pdgId = *Muon_pdgId_Ptr;
    Muon_pfIsoId_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_pfIsoId");
    Muon_pfIsoId = *Muon_pfIsoId_Ptr;
    Muon_pfRelIso03_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pfRelIso03_all");
    Muon_pfRelIso03_all = *Muon_pfRelIso03_all_Ptr;
    Muon_pfRelIso03_chg_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pfRelIso03_chg");
    Muon_pfRelIso03_chg = *Muon_pfRelIso03_chg_Ptr;
    Muon_pfRelIso04_all_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pfRelIso04_all");
    Muon_pfRelIso04_all = *Muon_pfRelIso04_all_Ptr;
    Muon_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_phi");
    Muon_phi = *Muon_phi_Ptr;
    Muon_pnScore_heavy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pnScore_heavy");
    Muon_pnScore_heavy = *Muon_pnScore_heavy_Ptr;
    Muon_pnScore_light_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pnScore_light");
    Muon_pnScore_light = *Muon_pnScore_light_Ptr;
    Muon_pnScore_prompt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pnScore_prompt");
    Muon_pnScore_prompt = *Muon_pnScore_prompt_Ptr;
    Muon_pnScore_tau_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pnScore_tau");
    Muon_pnScore_tau = *Muon_pnScore_tau_Ptr;
    Muon_promptMVA_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_promptMVA");
    Muon_promptMVA = *Muon_promptMVA_Ptr;
    Muon_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_pt");
    Muon_pt = *Muon_pt_Ptr;
    Muon_ptErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_ptErr");
    Muon_ptErr = *Muon_ptErr_Ptr;
    Muon_puppiIsoId_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_puppiIsoId");
    Muon_puppiIsoId = *Muon_puppiIsoId_Ptr;
    Muon_segmentComp_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_segmentComp");
    Muon_segmentComp = *Muon_segmentComp_Ptr;
    Muon_sip3d_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_sip3d");
    Muon_sip3d = *Muon_sip3d_Ptr;
    Muon_softId_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_softId");
    Muon_softId = *Muon_softId_Ptr;
    Muon_softMva_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_softMva");
    Muon_softMva = *Muon_softMva_Ptr;
    Muon_softMvaId_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_softMvaId");
    Muon_softMvaId = *Muon_softMvaId_Ptr;
    Muon_softMvaRun3_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_softMvaRun3");
    Muon_softMvaRun3 = *Muon_softMvaRun3_Ptr;
    Muon_svIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Muon_svIdx");
    Muon_svIdx = *Muon_svIdx_Ptr;
    Muon_tightCharge_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_tightCharge");
    Muon_tightCharge = *Muon_tightCharge_Ptr;
    Muon_tightId_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_tightId");
    Muon_tightId = *Muon_tightId_Ptr;
    Muon_tkIsoId_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Muon_tkIsoId");
    Muon_tkIsoId = *Muon_tkIsoId_Ptr;
    Muon_tkRelIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_tkRelIso");
    Muon_tkRelIso = *Muon_tkRelIso_Ptr;
    Muon_triggerIdLoose_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Muon_triggerIdLoose");
    Muon_triggerIdLoose = *Muon_triggerIdLoose_Ptr;
    Muon_tuneP_charge_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_tuneP_charge");
    Muon_tuneP_charge = *Muon_tuneP_charge_Ptr;
    Muon_tuneP_pterr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_tuneP_pterr");
    Muon_tuneP_pterr = *Muon_tuneP_pterr_Ptr;
    Muon_tunepRelPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Muon_tunepRelPt");
    Muon_tunepRelPt = *Muon_tunepRelPt_Ptr;
    nMuon_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nMuon");
    nMuon = **nMuon_Ptr;

    // OtherPV
    OtherPV_score_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "OtherPV_score");
    OtherPV_score = *OtherPV_score_Ptr;
    OtherPV_z_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "OtherPV_z");
    OtherPV_z = *OtherPV_z_Ptr;
    nOtherPV_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nOtherPV");
    nOtherPV = **nOtherPV_Ptr;

    // PFCand
    PFCand_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "PFCand_eta");
    PFCand_eta = *PFCand_eta_Ptr;
    PFCand_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "PFCand_mass");
    PFCand_mass = *PFCand_mass_Ptr;
    PFCand_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "PFCand_pdgId");
    PFCand_pdgId = *PFCand_pdgId_Ptr;
    PFCand_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "PFCand_phi");
    PFCand_phi = *PFCand_phi_Ptr;
    PFCand_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "PFCand_pt");
    PFCand_pt = *PFCand_pt_Ptr;
    nPFCand_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nPFCand");
    nPFCand = **nPFCand_Ptr;

    // PFMET
    PFMET_covXX_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_covXX");
    PFMET_covXX = **PFMET_covXX_Ptr;
    PFMET_covXY_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_covXY");
    PFMET_covXY = **PFMET_covXY_Ptr;
    PFMET_covYY_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_covYY");
    PFMET_covYY = **PFMET_covYY_Ptr;
    PFMET_phi_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_phi");
    PFMET_phi = **PFMET_phi_Ptr;
    PFMET_phiUnclusteredDown_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_phiUnclusteredDown");
    PFMET_phiUnclusteredDown = **PFMET_phiUnclusteredDown_Ptr;
    PFMET_phiUnclusteredUp_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_phiUnclusteredUp");
    PFMET_phiUnclusteredUp = **PFMET_phiUnclusteredUp_Ptr;
    PFMET_pt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_pt");
    PFMET_pt = **PFMET_pt_Ptr;
    PFMET_ptUnclusteredDown_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_ptUnclusteredDown");
    PFMET_ptUnclusteredDown = **PFMET_ptUnclusteredDown_Ptr;
    PFMET_ptUnclusteredUp_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_ptUnclusteredUp");
    PFMET_ptUnclusteredUp = **PFMET_ptUnclusteredUp_Ptr;
    PFMET_significance_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_significance");
    PFMET_significance = **PFMET_significance_Ptr;
    PFMET_sumEt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_sumEt");
    PFMET_sumEt = **PFMET_sumEt_Ptr;
    PFMET_sumPtUnclustered_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PFMET_sumPtUnclustered");
    PFMET_sumPtUnclustered = **PFMET_sumPtUnclustered_Ptr;

    // PSWeight
    PSWeight_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "PSWeight");
    PSWeight = *PSWeight_Ptr;
    nPSWeight_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nPSWeight");
    nPSWeight = **nPSWeight_Ptr;

    // PV
    PV_chi2_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_chi2");
    PV_chi2 = **PV_chi2_Ptr;
    PV_ndof_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_ndof");
    PV_ndof = **PV_ndof_Ptr;
    PV_npvs_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "PV_npvs");
    PV_npvs = **PV_npvs_Ptr;
    PV_npvsGood_Ptr = std::make_unique<TTreeReaderValue<UChar_t>>(*fReader, "PV_npvsGood");
    PV_npvsGood = **PV_npvsGood_Ptr;
    PV_score_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_score");
    PV_score = **PV_score_Ptr;
    PV_sumpt2_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_sumpt2");
    PV_sumpt2 = **PV_sumpt2_Ptr;
    PV_sumpx_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_sumpx");
    PV_sumpx = **PV_sumpx_Ptr;
    PV_sumpy_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_sumpy");
    PV_sumpy = **PV_sumpy_Ptr;
    PV_x_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_x");
    PV_x = **PV_x_Ptr;
    PV_y_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_y");
    PV_y = **PV_y_Ptr;
    PV_z_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PV_z");
    PV_z = **PV_z_Ptr;

    // Photon
    Photon_cutBased_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Photon_cutBased");
    Photon_cutBased = *Photon_cutBased_Ptr;
    Photon_ecalPFClusterIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_ecalPFClusterIso");
    Photon_ecalPFClusterIso = *Photon_ecalPFClusterIso_Ptr;
    Photon_electronIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Photon_electronIdx");
    Photon_electronIdx = *Photon_electronIdx_Ptr;
    Photon_electronVeto_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Photon_electronVeto");
    Photon_electronVeto = *Photon_electronVeto_Ptr;
    Photon_energyErr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_energyErr");
    Photon_energyErr = *Photon_energyErr_Ptr;
    Photon_energyRaw_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_energyRaw");
    Photon_energyRaw = *Photon_energyRaw_Ptr;
    Photon_esEffSigmaRR_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_esEffSigmaRR");
    Photon_esEffSigmaRR = *Photon_esEffSigmaRR_Ptr;
    Photon_esEnergyOverRawE_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_esEnergyOverRawE");
    Photon_esEnergyOverRawE = *Photon_esEnergyOverRawE_Ptr;
    Photon_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_eta");
    Photon_eta = *Photon_eta_Ptr;
    Photon_etaWidth_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_etaWidth");
    Photon_etaWidth = *Photon_etaWidth_Ptr;
    Photon_genPartFlav_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Photon_genPartFlav");
    Photon_genPartFlav = *Photon_genPartFlav_Ptr;
    Photon_genPartIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Photon_genPartIdx");
    Photon_genPartIdx = *Photon_genPartIdx_Ptr;
    Photon_haloTaggerMVAVal_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_haloTaggerMVAVal");
    Photon_haloTaggerMVAVal = *Photon_haloTaggerMVAVal_Ptr;
    Photon_hasConversionTracks_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Photon_hasConversionTracks");
    Photon_hasConversionTracks = *Photon_hasConversionTracks_Ptr;
    Photon_hcalPFClusterIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_hcalPFClusterIso");
    Photon_hcalPFClusterIso = *Photon_hcalPFClusterIso_Ptr;
    Photon_hoe_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_hoe");
    Photon_hoe = *Photon_hoe_Ptr;
    Photon_hoe_PUcorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_hoe_PUcorr");
    Photon_hoe_PUcorr = *Photon_hoe_PUcorr_Ptr;
    Photon_hoe_Tower_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_hoe_Tower");
    Photon_hoe_Tower = *Photon_hoe_Tower_Ptr;
    Photon_isScEtaEB_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Photon_isScEtaEB");
    Photon_isScEtaEB = *Photon_isScEtaEB_Ptr;
    Photon_isScEtaEE_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Photon_isScEtaEE");
    Photon_isScEtaEE = *Photon_isScEtaEE_Ptr;
    Photon_jetIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Photon_jetIdx");
    Photon_jetIdx = *Photon_jetIdx_Ptr;
    Photon_mvaID_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_mvaID");
    Photon_mvaID = *Photon_mvaID_Ptr;
    Photon_mvaID_WP80_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Photon_mvaID_WP80");
    Photon_mvaID_WP80 = *Photon_mvaID_WP80_Ptr;
    Photon_mvaID_WP90_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Photon_mvaID_WP90");
    Photon_mvaID_WP90 = *Photon_mvaID_WP90_Ptr;
    Photon_pfChargedIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_pfChargedIso");
    Photon_pfChargedIso = *Photon_pfChargedIso_Ptr;
    Photon_pfChargedIsoPFPV_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_pfChargedIsoPFPV");
    Photon_pfChargedIsoPFPV = *Photon_pfChargedIsoPFPV_Ptr;
    Photon_pfChargedIsoWorstVtx_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_pfChargedIsoWorstVtx");
    Photon_pfChargedIsoWorstVtx = *Photon_pfChargedIsoWorstVtx_Ptr;
    Photon_pfPhoIso03_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_pfPhoIso03");
    Photon_pfPhoIso03 = *Photon_pfPhoIso03_Ptr;
    Photon_pfRelIso03_all_quadratic_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_pfRelIso03_all_quadratic");
    Photon_pfRelIso03_all_quadratic = *Photon_pfRelIso03_all_quadratic_Ptr;
    Photon_pfRelIso03_chg_quadratic_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_pfRelIso03_chg_quadratic");
    Photon_pfRelIso03_chg_quadratic = *Photon_pfRelIso03_chg_quadratic_Ptr;
    Photon_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_phi");
    Photon_phi = *Photon_phi_Ptr;
    Photon_phiWidth_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_phiWidth");
    Photon_phiWidth = *Photon_phiWidth_Ptr;
    Photon_pixelSeed_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Photon_pixelSeed");
    Photon_pixelSeed = *Photon_pixelSeed_Ptr;
    Photon_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_pt");
    Photon_pt = *Photon_pt_Ptr;
    Photon_r9_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_r9");
    Photon_r9 = *Photon_r9_Ptr;
    Photon_s4_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_s4");
    Photon_s4 = *Photon_s4_Ptr;
    Photon_seedGain_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Photon_seedGain");
    Photon_seedGain = *Photon_seedGain_Ptr;
    Photon_seediEtaOriX_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Photon_seediEtaOriX");
    Photon_seediEtaOriX = *Photon_seediEtaOriX_Ptr;
    Photon_seediPhiOriY_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Photon_seediPhiOriY");
    Photon_seediPhiOriY = *Photon_seediPhiOriY_Ptr;
    Photon_sieie_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_sieie");
    Photon_sieie = *Photon_sieie_Ptr;
    Photon_sieip_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_sieip");
    Photon_sieip = *Photon_sieip_Ptr;
    Photon_sipip_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_sipip");
    Photon_sipip = *Photon_sipip_Ptr;
    Photon_superclusterEta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_superclusterEta");
    Photon_superclusterEta = *Photon_superclusterEta_Ptr;
    Photon_trkSumPtHollowConeDR03_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_trkSumPtHollowConeDR03");
    Photon_trkSumPtHollowConeDR03 = *Photon_trkSumPtHollowConeDR03_Ptr;
    Photon_trkSumPtSolidConeDR04_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_trkSumPtSolidConeDR04");
    Photon_trkSumPtSolidConeDR04 = *Photon_trkSumPtSolidConeDR04_Ptr;
    Photon_vidNestedWPBitmap_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "Photon_vidNestedWPBitmap");
    Photon_vidNestedWPBitmap = *Photon_vidNestedWPBitmap_Ptr;
    Photon_x_calo_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_x_calo");
    Photon_x_calo = *Photon_x_calo_Ptr;
    Photon_y_calo_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_y_calo");
    Photon_y_calo = *Photon_y_calo_Ptr;
    Photon_z_calo_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Photon_z_calo");
    Photon_z_calo = *Photon_z_calo_Ptr;
    nPhoton_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nPhoton");
    nPhoton = **nPhoton_Ptr;

    // Pileup
    Pileup_gpudensity_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Pileup_gpudensity");
    Pileup_gpudensity = **Pileup_gpudensity_Ptr;
    Pileup_nPU_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "Pileup_nPU");
    Pileup_nPU = **Pileup_nPU_Ptr;
    Pileup_nTrueInt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Pileup_nTrueInt");
    Pileup_nTrueInt = **Pileup_nTrueInt_Ptr;
    Pileup_pthatmax_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Pileup_pthatmax");
    Pileup_pthatmax = **Pileup_pthatmax_Ptr;
    Pileup_pudensity_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Pileup_pudensity");
    Pileup_pudensity = **Pileup_pudensity_Ptr;
    Pileup_sumEOOT_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "Pileup_sumEOOT");
    Pileup_sumEOOT = **Pileup_sumEOOT_Ptr;
    Pileup_sumLOOT_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "Pileup_sumLOOT");
    Pileup_sumLOOT = **Pileup_sumLOOT_Ptr;

    // PuppiMET
    PuppiMET_covXX_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_covXX");
    PuppiMET_covXX = **PuppiMET_covXX_Ptr;
    PuppiMET_covXY_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_covXY");
    PuppiMET_covXY = **PuppiMET_covXY_Ptr;
    PuppiMET_covYY_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_covYY");
    PuppiMET_covYY = **PuppiMET_covYY_Ptr;
    PuppiMET_phi_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_phi");
    PuppiMET_phi = **PuppiMET_phi_Ptr;
    PuppiMET_phiUnclusteredDown_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_phiUnclusteredDown");
    PuppiMET_phiUnclusteredDown = **PuppiMET_phiUnclusteredDown_Ptr;
    PuppiMET_phiUnclusteredUp_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_phiUnclusteredUp");
    PuppiMET_phiUnclusteredUp = **PuppiMET_phiUnclusteredUp_Ptr;
    PuppiMET_pt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_pt");
    PuppiMET_pt = **PuppiMET_pt_Ptr;
    PuppiMET_ptUnclusteredDown_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_ptUnclusteredDown");
    PuppiMET_ptUnclusteredDown = **PuppiMET_ptUnclusteredDown_Ptr;
    PuppiMET_ptUnclusteredUp_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_ptUnclusteredUp");
    PuppiMET_ptUnclusteredUp = **PuppiMET_ptUnclusteredUp_Ptr;
    PuppiMET_significance_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_significance");
    PuppiMET_significance = **PuppiMET_significance_Ptr;
    PuppiMET_sumEt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_sumEt");
    PuppiMET_sumEt = **PuppiMET_sumEt_Ptr;
    PuppiMET_sumPtUnclustered_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "PuppiMET_sumPtUnclustered");
    PuppiMET_sumPtUnclustered = **PuppiMET_sumPtUnclustered_Ptr;

    // Rho
    Rho_fixedGridRhoAll_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Rho_fixedGridRhoAll");
    Rho_fixedGridRhoAll = **Rho_fixedGridRhoAll_Ptr;
    Rho_fixedGridRhoFastjetAll_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Rho_fixedGridRhoFastjetAll");
    Rho_fixedGridRhoFastjetAll = **Rho_fixedGridRhoFastjetAll_Ptr;
    Rho_fixedGridRhoFastjetCentral_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Rho_fixedGridRhoFastjetCentral");
    Rho_fixedGridRhoFastjetCentral = **Rho_fixedGridRhoFastjetCentral_Ptr;
    Rho_fixedGridRhoFastjetCentralCalo_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Rho_fixedGridRhoFastjetCentralCalo");
    Rho_fixedGridRhoFastjetCentralCalo = **Rho_fixedGridRhoFastjetCentralCalo_Ptr;
    Rho_fixedGridRhoFastjetCentralChargedPileUp_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Rho_fixedGridRhoFastjetCentralChargedPileUp");
    Rho_fixedGridRhoFastjetCentralChargedPileUp = **Rho_fixedGridRhoFastjetCentralChargedPileUp_Ptr;
    Rho_fixedGridRhoFastjetCentralNeutral_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "Rho_fixedGridRhoFastjetCentralNeutral");
    Rho_fixedGridRhoFastjetCentralNeutral = **Rho_fixedGridRhoFastjetCentralNeutral_Ptr;

    // SV
    SV_charge_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "SV_charge");
    SV_charge = *SV_charge_Ptr;
    SV_chi2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_chi2");
    SV_chi2 = *SV_chi2_Ptr;
    SV_dlen_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_dlen");
    SV_dlen = *SV_dlen_Ptr;
    SV_dlenSig_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_dlenSig");
    SV_dlenSig = *SV_dlenSig_Ptr;
    SV_dxy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_dxy");
    SV_dxy = *SV_dxy_Ptr;
    SV_dxySig_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_dxySig");
    SV_dxySig = *SV_dxySig_Ptr;
    SV_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_eta");
    SV_eta = *SV_eta_Ptr;
    SV_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_mass");
    SV_mass = *SV_mass_Ptr;
    SV_ndof_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_ndof");
    SV_ndof = *SV_ndof_Ptr;
    SV_ntracks_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "SV_ntracks");
    SV_ntracks = *SV_ntracks_Ptr;
    SV_pAngle_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_pAngle");
    SV_pAngle = *SV_pAngle_Ptr;
    SV_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_phi");
    SV_phi = *SV_phi_Ptr;
    SV_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_pt");
    SV_pt = *SV_pt_Ptr;
    SV_x_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_x");
    SV_x = *SV_x_Ptr;
    SV_y_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_y");
    SV_y = *SV_y_Ptr;
    SV_z_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SV_z");
    SV_z = *SV_z_Ptr;
    nSV_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nSV");
    nSV = **nSV_Ptr;

    // SubGenJetAK8
    SubGenJetAK8_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubGenJetAK8_eta");
    SubGenJetAK8_eta = *SubGenJetAK8_eta_Ptr;
    SubGenJetAK8_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubGenJetAK8_mass");
    SubGenJetAK8_mass = *SubGenJetAK8_mass_Ptr;
    SubGenJetAK8_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubGenJetAK8_phi");
    SubGenJetAK8_phi = *SubGenJetAK8_phi_Ptr;
    SubGenJetAK8_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubGenJetAK8_pt");
    SubGenJetAK8_pt = *SubGenJetAK8_pt_Ptr;
    nSubGenJetAK8_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nSubGenJetAK8");
    nSubGenJetAK8 = **nSubGenJetAK8_Ptr;

    // SubJet
    SubJet_UParTAK4RegPtRawCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_UParTAK4RegPtRawCorr");
    SubJet_UParTAK4RegPtRawCorr = *SubJet_UParTAK4RegPtRawCorr_Ptr;
    SubJet_UParTAK4RegPtRawCorrNeutrino_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_UParTAK4RegPtRawCorrNeutrino");
    SubJet_UParTAK4RegPtRawCorrNeutrino = *SubJet_UParTAK4RegPtRawCorrNeutrino_Ptr;
    SubJet_UParTAK4RegPtRawRes_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_UParTAK4RegPtRawRes");
    SubJet_UParTAK4RegPtRawRes = *SubJet_UParTAK4RegPtRawRes_Ptr;
    SubJet_UParTAK4V1RegPtRawCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_UParTAK4V1RegPtRawCorr");
    SubJet_UParTAK4V1RegPtRawCorr = *SubJet_UParTAK4V1RegPtRawCorr_Ptr;
    SubJet_UParTAK4V1RegPtRawCorrNeutrino_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_UParTAK4V1RegPtRawCorrNeutrino");
    SubJet_UParTAK4V1RegPtRawCorrNeutrino = *SubJet_UParTAK4V1RegPtRawCorrNeutrino_Ptr;
    SubJet_UParTAK4V1RegPtRawRes_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_UParTAK4V1RegPtRawRes");
    SubJet_UParTAK4V1RegPtRawRes = *SubJet_UParTAK4V1RegPtRawRes_Ptr;
    SubJet_area_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_area");
    SubJet_area = *SubJet_area_Ptr;
    SubJet_btagDeepFlavB_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_btagDeepFlavB");
    SubJet_btagDeepFlavB = *SubJet_btagDeepFlavB_Ptr;
    SubJet_btagUParTAK4B_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_btagUParTAK4B");
    SubJet_btagUParTAK4B = *SubJet_btagUParTAK4B_Ptr;
    SubJet_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_eta");
    SubJet_eta = *SubJet_eta_Ptr;
    SubJet_hadronFlavour_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "SubJet_hadronFlavour");
    SubJet_hadronFlavour = *SubJet_hadronFlavour_Ptr;
    SubJet_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_mass");
    SubJet_mass = *SubJet_mass_Ptr;
    SubJet_n2b1_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_n2b1");
    SubJet_n2b1 = *SubJet_n2b1_Ptr;
    SubJet_n3b1_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_n3b1");
    SubJet_n3b1 = *SubJet_n3b1_Ptr;
    SubJet_nBHadrons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "SubJet_nBHadrons");
    SubJet_nBHadrons = *SubJet_nBHadrons_Ptr;
    SubJet_nCHadrons_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "SubJet_nCHadrons");
    SubJet_nCHadrons = *SubJet_nCHadrons_Ptr;
    SubJet_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_phi");
    SubJet_phi = *SubJet_phi_Ptr;
    SubJet_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_pt");
    SubJet_pt = *SubJet_pt_Ptr;
    SubJet_rawFactor_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_rawFactor");
    SubJet_rawFactor = *SubJet_rawFactor_Ptr;
    SubJet_subGenJetAK8Idx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "SubJet_subGenJetAK8Idx");
    SubJet_subGenJetAK8Idx = *SubJet_subGenJetAK8Idx_Ptr;
    SubJet_tau1_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_tau1");
    SubJet_tau1 = *SubJet_tau1_Ptr;
    SubJet_tau2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_tau2");
    SubJet_tau2 = *SubJet_tau2_Ptr;
    SubJet_tau3_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_tau3");
    SubJet_tau3 = *SubJet_tau3_Ptr;
    SubJet_tau4_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "SubJet_tau4");
    SubJet_tau4 = *SubJet_tau4_Ptr;
    nSubJet_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nSubJet");
    nSubJet = **nSubJet_Ptr;

    // Tau
    Tau_IPx_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_IPx");
    Tau_IPx = *Tau_IPx_Ptr;
    Tau_IPy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_IPy");
    Tau_IPy = *Tau_IPy_Ptr;
    Tau_IPz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_IPz");
    Tau_IPz = *Tau_IPz_Ptr;
    Tau_charge_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_charge");
    Tau_charge = *Tau_charge_Ptr;
    Tau_chargedIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_chargedIso");
    Tau_chargedIso = *Tau_chargedIso_Ptr;
    Tau_decayMode_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Tau_decayMode");
    Tau_decayMode = *Tau_decayMode_Ptr;
    Tau_decayModePNet_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_decayModePNet");
    Tau_decayModePNet = *Tau_decayModePNet_Ptr;
    Tau_decayModeUParT_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_decayModeUParT");
    Tau_decayModeUParT = *Tau_decayModeUParT_Ptr;
    Tau_dxy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_dxy");
    Tau_dxy = *Tau_dxy_Ptr;
    Tau_dz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_dz");
    Tau_dz = *Tau_dz_Ptr;
    Tau_eleIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_eleIdx");
    Tau_eleIdx = *Tau_eleIdx_Ptr;
    Tau_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_eta");
    Tau_eta = *Tau_eta_Ptr;
    Tau_genPartFlav_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Tau_genPartFlav");
    Tau_genPartFlav = *Tau_genPartFlav_Ptr;
    Tau_genPartIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_genPartIdx");
    Tau_genPartIdx = *Tau_genPartIdx_Ptr;
    Tau_hasRefitSV_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Tau_hasRefitSV");
    Tau_hasRefitSV = *Tau_hasRefitSV_Ptr;
    Tau_idAntiEleDeadECal_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Tau_idAntiEleDeadECal");
    Tau_idAntiEleDeadECal = *Tau_idAntiEleDeadECal_Ptr;
    Tau_idAntiMu_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Tau_idAntiMu");
    Tau_idAntiMu = *Tau_idAntiMu_Ptr;
    Tau_idDecayModeNewDMs_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Tau_idDecayModeNewDMs");
    Tau_idDecayModeNewDMs = *Tau_idDecayModeNewDMs_Ptr;
    Tau_idDecayModeOldDMs_Ptr = std::make_unique<TTreeReaderArray<Bool_t>>(*fReader, "Tau_idDecayModeOldDMs");
    Tau_idDecayModeOldDMs = *Tau_idDecayModeOldDMs_Ptr;
    Tau_idDeepTau2018v2p5VSe_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Tau_idDeepTau2018v2p5VSe");
    Tau_idDeepTau2018v2p5VSe = *Tau_idDeepTau2018v2p5VSe_Ptr;
    Tau_idDeepTau2018v2p5VSjet_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Tau_idDeepTau2018v2p5VSjet");
    Tau_idDeepTau2018v2p5VSjet = *Tau_idDeepTau2018v2p5VSjet_Ptr;
    Tau_idDeepTau2018v2p5VSmu_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Tau_idDeepTau2018v2p5VSmu");
    Tau_idDeepTau2018v2p5VSmu = *Tau_idDeepTau2018v2p5VSmu_Ptr;
    Tau_ipLengthSig_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_ipLengthSig");
    Tau_ipLengthSig = *Tau_ipLengthSig_Ptr;
    Tau_jetIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_jetIdx");
    Tau_jetIdx = *Tau_jetIdx_Ptr;
    Tau_leadTkDeltaEta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_leadTkDeltaEta");
    Tau_leadTkDeltaEta = *Tau_leadTkDeltaEta_Ptr;
    Tau_leadTkDeltaPhi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_leadTkDeltaPhi");
    Tau_leadTkDeltaPhi = *Tau_leadTkDeltaPhi_Ptr;
    Tau_leadTkPtOverTauPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_leadTkPtOverTauPt");
    Tau_leadTkPtOverTauPt = *Tau_leadTkPtOverTauPt_Ptr;
    Tau_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_mass");
    Tau_mass = *Tau_mass_Ptr;
    Tau_muIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_muIdx");
    Tau_muIdx = *Tau_muIdx_Ptr;
    Tau_nSVs_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "Tau_nSVs");
    Tau_nSVs = *Tau_nSVs_Ptr;
    Tau_neutralIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_neutralIso");
    Tau_neutralIso = *Tau_neutralIso_Ptr;
    Tau_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_phi");
    Tau_phi = *Tau_phi_Ptr;
    Tau_photonsOutsideSignalCone_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_photonsOutsideSignalCone");
    Tau_photonsOutsideSignalCone = *Tau_photonsOutsideSignalCone_Ptr;
    Tau_probDM0PNet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM0PNet");
    Tau_probDM0PNet = *Tau_probDM0PNet_Ptr;
    Tau_probDM0UParT_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM0UParT");
    Tau_probDM0UParT = *Tau_probDM0UParT_Ptr;
    Tau_probDM10PNet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM10PNet");
    Tau_probDM10PNet = *Tau_probDM10PNet_Ptr;
    Tau_probDM10UParT_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM10UParT");
    Tau_probDM10UParT = *Tau_probDM10UParT_Ptr;
    Tau_probDM11PNet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM11PNet");
    Tau_probDM11PNet = *Tau_probDM11PNet_Ptr;
    Tau_probDM11UParT_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM11UParT");
    Tau_probDM11UParT = *Tau_probDM11UParT_Ptr;
    Tau_probDM1PNet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM1PNet");
    Tau_probDM1PNet = *Tau_probDM1PNet_Ptr;
    Tau_probDM1UParT_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM1UParT");
    Tau_probDM1UParT = *Tau_probDM1UParT_Ptr;
    Tau_probDM2PNet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM2PNet");
    Tau_probDM2PNet = *Tau_probDM2PNet_Ptr;
    Tau_probDM2UParT_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_probDM2UParT");
    Tau_probDM2UParT = *Tau_probDM2UParT_Ptr;
    Tau_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_pt");
    Tau_pt = *Tau_pt_Ptr;
    Tau_ptCorrPNet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_ptCorrPNet");
    Tau_ptCorrPNet = *Tau_ptCorrPNet_Ptr;
    Tau_ptCorrUParT_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_ptCorrUParT");
    Tau_ptCorrUParT = *Tau_ptCorrUParT_Ptr;
    Tau_puCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_puCorr");
    Tau_puCorr = *Tau_puCorr_Ptr;
    Tau_qConfPNet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_qConfPNet");
    Tau_qConfPNet = *Tau_qConfPNet_Ptr;
    Tau_qConfUParT_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_qConfUParT");
    Tau_qConfUParT = *Tau_qConfUParT_Ptr;
    Tau_rawDeepTau2018v2p5VSe_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawDeepTau2018v2p5VSe");
    Tau_rawDeepTau2018v2p5VSe = *Tau_rawDeepTau2018v2p5VSe_Ptr;
    Tau_rawDeepTau2018v2p5VSjet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawDeepTau2018v2p5VSjet");
    Tau_rawDeepTau2018v2p5VSjet = *Tau_rawDeepTau2018v2p5VSjet_Ptr;
    Tau_rawDeepTau2018v2p5VSmu_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawDeepTau2018v2p5VSmu");
    Tau_rawDeepTau2018v2p5VSmu = *Tau_rawDeepTau2018v2p5VSmu_Ptr;
    Tau_rawIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawIso");
    Tau_rawIso = *Tau_rawIso_Ptr;
    Tau_rawIsodR03_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawIsodR03");
    Tau_rawIsodR03 = *Tau_rawIsodR03_Ptr;
    Tau_rawPNetVSe_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawPNetVSe");
    Tau_rawPNetVSe = *Tau_rawPNetVSe_Ptr;
    Tau_rawPNetVSjet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawPNetVSjet");
    Tau_rawPNetVSjet = *Tau_rawPNetVSjet_Ptr;
    Tau_rawPNetVSmu_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawPNetVSmu");
    Tau_rawPNetVSmu = *Tau_rawPNetVSmu_Ptr;
    Tau_rawUParTVSe_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawUParTVSe");
    Tau_rawUParTVSe = *Tau_rawUParTVSe_Ptr;
    Tau_rawUParTVSjet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawUParTVSjet");
    Tau_rawUParTVSjet = *Tau_rawUParTVSjet_Ptr;
    Tau_rawUParTVSmu_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_rawUParTVSmu");
    Tau_rawUParTVSmu = *Tau_rawUParTVSmu_Ptr;
    Tau_refitSVchi2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVchi2");
    Tau_refitSVchi2 = *Tau_refitSVchi2_Ptr;
    Tau_refitSVcov00_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVcov00");
    Tau_refitSVcov00 = *Tau_refitSVcov00_Ptr;
    Tau_refitSVcov10_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVcov10");
    Tau_refitSVcov10 = *Tau_refitSVcov10_Ptr;
    Tau_refitSVcov11_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVcov11");
    Tau_refitSVcov11 = *Tau_refitSVcov11_Ptr;
    Tau_refitSVcov20_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVcov20");
    Tau_refitSVcov20 = *Tau_refitSVcov20_Ptr;
    Tau_refitSVcov21_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVcov21");
    Tau_refitSVcov21 = *Tau_refitSVcov21_Ptr;
    Tau_refitSVcov22_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVcov22");
    Tau_refitSVcov22 = *Tau_refitSVcov22_Ptr;
    Tau_refitSVx_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVx");
    Tau_refitSVx = *Tau_refitSVx_Ptr;
    Tau_refitSVy_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVy");
    Tau_refitSVy = *Tau_refitSVy_Ptr;
    Tau_refitSVz_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "Tau_refitSVz");
    Tau_refitSVz = *Tau_refitSVz_Ptr;
    Tau_svIdx1_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_svIdx1");
    Tau_svIdx1 = *Tau_svIdx1_Ptr;
    Tau_svIdx2_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "Tau_svIdx2");
    Tau_svIdx2 = *Tau_svIdx2_Ptr;
    nTau_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nTau");
    nTau = **nTau_Ptr;

    // TauProd
    TauProd_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TauProd_eta");
    TauProd_eta = *TauProd_eta_Ptr;
    TauProd_pdgId_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "TauProd_pdgId");
    TauProd_pdgId = *TauProd_pdgId_Ptr;
    TauProd_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TauProd_phi");
    TauProd_phi = *TauProd_phi_Ptr;
    TauProd_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TauProd_pt");
    TauProd_pt = *TauProd_pt_Ptr;
    TauProd_tauIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "TauProd_tauIdx");
    TauProd_tauIdx = *TauProd_tauIdx_Ptr;
    nTauProd_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nTauProd");
    nTauProd = **nTauProd_Ptr;

    // TauSpinner
    TauSpinner_weight_cp_0_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0");
    TauSpinner_weight_cp_0 = **TauSpinner_weight_cp_0_Ptr;
    TauSpinner_weight_cp_0_alt_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0_alt");
    TauSpinner_weight_cp_0_alt = **TauSpinner_weight_cp_0_alt_Ptr;
    TauSpinner_weight_cp_0p25_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0p25");
    TauSpinner_weight_cp_0p25 = **TauSpinner_weight_cp_0p25_Ptr;
    TauSpinner_weight_cp_0p25_alt_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0p25_alt");
    TauSpinner_weight_cp_0p25_alt = **TauSpinner_weight_cp_0p25_alt_Ptr;
    TauSpinner_weight_cp_0p375_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0p375");
    TauSpinner_weight_cp_0p375 = **TauSpinner_weight_cp_0p375_Ptr;
    TauSpinner_weight_cp_0p375_alt_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0p375_alt");
    TauSpinner_weight_cp_0p375_alt = **TauSpinner_weight_cp_0p375_alt_Ptr;
    TauSpinner_weight_cp_0p5_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0p5");
    TauSpinner_weight_cp_0p5 = **TauSpinner_weight_cp_0p5_Ptr;
    TauSpinner_weight_cp_0p5_alt_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_0p5_alt");
    TauSpinner_weight_cp_0p5_alt = **TauSpinner_weight_cp_0p5_alt_Ptr;
    TauSpinner_weight_cp_minus0p25_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_minus0p25");
    TauSpinner_weight_cp_minus0p25 = **TauSpinner_weight_cp_minus0p25_Ptr;
    TauSpinner_weight_cp_minus0p25_alt_Ptr = std::make_unique<TTreeReaderValue<Double_t>>(*fReader, "TauSpinner_weight_cp_minus0p25_alt");
    TauSpinner_weight_cp_minus0p25_alt = **TauSpinner_weight_cp_minus0p25_alt_Ptr;

    // TrackGenJetAK4
    TrackGenJetAK4_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrackGenJetAK4_eta");
    TrackGenJetAK4_eta = *TrackGenJetAK4_eta_Ptr;
    TrackGenJetAK4_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrackGenJetAK4_phi");
    TrackGenJetAK4_phi = *TrackGenJetAK4_phi_Ptr;
    TrackGenJetAK4_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrackGenJetAK4_pt");
    TrackGenJetAK4_pt = *TrackGenJetAK4_pt_Ptr;
    nTrackGenJetAK4_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nTrackGenJetAK4");
    nTrackGenJetAK4 = **nTrackGenJetAK4_Ptr;

    // TrigObj
    TrigObj_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrigObj_eta");
    TrigObj_eta = *TrigObj_eta_Ptr;
    TrigObj_filterBits_Ptr = std::make_unique<TTreeReaderArray<ULong64_t>>(*fReader, "TrigObj_filterBits");
    TrigObj_filterBits = *TrigObj_filterBits_Ptr;
    TrigObj_id_Ptr = std::make_unique<TTreeReaderArray<UShort_t>>(*fReader, "TrigObj_id");
    TrigObj_id = *TrigObj_id_Ptr;
    TrigObj_l1charge_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "TrigObj_l1charge");
    TrigObj_l1charge = *TrigObj_l1charge_Ptr;
    TrigObj_l1iso_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "TrigObj_l1iso");
    TrigObj_l1iso = *TrigObj_l1iso_Ptr;
    TrigObj_l1pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrigObj_l1pt");
    TrigObj_l1pt = *TrigObj_l1pt_Ptr;
    TrigObj_l1pt_2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrigObj_l1pt_2");
    TrigObj_l1pt_2 = *TrigObj_l1pt_2_Ptr;
    TrigObj_l2pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrigObj_l2pt");
    TrigObj_l2pt = *TrigObj_l2pt_Ptr;
    TrigObj_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrigObj_phi");
    TrigObj_phi = *TrigObj_phi_Ptr;
    TrigObj_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "TrigObj_pt");
    TrigObj_pt = *TrigObj_pt_Ptr;
    nTrigObj_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nTrigObj");
    nTrigObj = **nTrigObj_Ptr;

    // TrkMET
    TrkMET_phi_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "TrkMET_phi");
    TrkMET_phi = **TrkMET_phi_Ptr;
    TrkMET_pt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "TrkMET_pt");
    TrkMET_pt = **TrkMET_pt_Ptr;
    TrkMET_sumEt_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "TrkMET_sumEt");
    TrkMET_sumEt = **TrkMET_sumEt_Ptr;

    // boostedTau
    boostedTau_charge_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "boostedTau_charge");
    boostedTau_charge = *boostedTau_charge_Ptr;
    boostedTau_chargedIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_chargedIso");
    boostedTau_chargedIso = *boostedTau_chargedIso_Ptr;
    boostedTau_decayMode_Ptr = std::make_unique<TTreeReaderArray<Int_t>>(*fReader, "boostedTau_decayMode");
    boostedTau_decayMode = *boostedTau_decayMode_Ptr;
    boostedTau_eta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_eta");
    boostedTau_eta = *boostedTau_eta_Ptr;
    boostedTau_genPartFlav_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "boostedTau_genPartFlav");
    boostedTau_genPartFlav = *boostedTau_genPartFlav_Ptr;
    boostedTau_genPartIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "boostedTau_genPartIdx");
    boostedTau_genPartIdx = *boostedTau_genPartIdx_Ptr;
    boostedTau_idAntiEle2018_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "boostedTau_idAntiEle2018");
    boostedTau_idAntiEle2018 = *boostedTau_idAntiEle2018_Ptr;
    boostedTau_idAntiMu_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "boostedTau_idAntiMu");
    boostedTau_idAntiMu = *boostedTau_idAntiMu_Ptr;
    boostedTau_idMVAnewDM2017v2_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "boostedTau_idMVAnewDM2017v2");
    boostedTau_idMVAnewDM2017v2 = *boostedTau_idMVAnewDM2017v2_Ptr;
    boostedTau_idMVAoldDM2017v2_Ptr = std::make_unique<TTreeReaderArray<UChar_t>>(*fReader, "boostedTau_idMVAoldDM2017v2");
    boostedTau_idMVAoldDM2017v2 = *boostedTau_idMVAoldDM2017v2_Ptr;
    boostedTau_jetIdx_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "boostedTau_jetIdx");
    boostedTau_jetIdx = *boostedTau_jetIdx_Ptr;
    boostedTau_leadTkDeltaEta_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_leadTkDeltaEta");
    boostedTau_leadTkDeltaEta = *boostedTau_leadTkDeltaEta_Ptr;
    boostedTau_leadTkDeltaPhi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_leadTkDeltaPhi");
    boostedTau_leadTkDeltaPhi = *boostedTau_leadTkDeltaPhi_Ptr;
    boostedTau_leadTkPtOverTauPt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_leadTkPtOverTauPt");
    boostedTau_leadTkPtOverTauPt = *boostedTau_leadTkPtOverTauPt_Ptr;
    boostedTau_mass_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_mass");
    boostedTau_mass = *boostedTau_mass_Ptr;
    boostedTau_neutralIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_neutralIso");
    boostedTau_neutralIso = *boostedTau_neutralIso_Ptr;
    boostedTau_phi_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_phi");
    boostedTau_phi = *boostedTau_phi_Ptr;
    boostedTau_photonsOutsideSignalCone_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_photonsOutsideSignalCone");
    boostedTau_photonsOutsideSignalCone = *boostedTau_photonsOutsideSignalCone_Ptr;
    boostedTau_pt_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_pt");
    boostedTau_pt = *boostedTau_pt_Ptr;
    boostedTau_puCorr_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_puCorr");
    boostedTau_puCorr = *boostedTau_puCorr_Ptr;
    boostedTau_rawAntiEle2018_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawAntiEle2018");
    boostedTau_rawAntiEle2018 = *boostedTau_rawAntiEle2018_Ptr;
    boostedTau_rawAntiEleCat2018_Ptr = std::make_unique<TTreeReaderArray<Short_t>>(*fReader, "boostedTau_rawAntiEleCat2018");
    boostedTau_rawAntiEleCat2018 = *boostedTau_rawAntiEleCat2018_Ptr;
    boostedTau_rawBoostedDeepTauRunIIv2p0VSe_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawBoostedDeepTauRunIIv2p0VSe");
    boostedTau_rawBoostedDeepTauRunIIv2p0VSe = *boostedTau_rawBoostedDeepTauRunIIv2p0VSe_Ptr;
    boostedTau_rawBoostedDeepTauRunIIv2p0VSjet_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawBoostedDeepTauRunIIv2p0VSjet");
    boostedTau_rawBoostedDeepTauRunIIv2p0VSjet = *boostedTau_rawBoostedDeepTauRunIIv2p0VSjet_Ptr;
    boostedTau_rawBoostedDeepTauRunIIv2p0VSmu_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawBoostedDeepTauRunIIv2p0VSmu");
    boostedTau_rawBoostedDeepTauRunIIv2p0VSmu = *boostedTau_rawBoostedDeepTauRunIIv2p0VSmu_Ptr;
    boostedTau_rawIso_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawIso");
    boostedTau_rawIso = *boostedTau_rawIso_Ptr;
    boostedTau_rawIsodR03_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawIsodR03");
    boostedTau_rawIsodR03 = *boostedTau_rawIsodR03_Ptr;
    boostedTau_rawMVAnewDM2017v2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawMVAnewDM2017v2");
    boostedTau_rawMVAnewDM2017v2 = *boostedTau_rawMVAnewDM2017v2_Ptr;
    boostedTau_rawMVAoldDM2017v2_Ptr = std::make_unique<TTreeReaderArray<Float_t>>(*fReader, "boostedTau_rawMVAoldDM2017v2");
    boostedTau_rawMVAoldDM2017v2 = *boostedTau_rawMVAoldDM2017v2_Ptr;
    nboostedTau_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "nboostedTau");
    nboostedTau = **nboostedTau_Ptr;

    // bunchCrossing
    bunchCrossing_Ptr = std::make_unique<TTreeReaderValue<UInt_t>>(*fReader, "bunchCrossing");
    bunchCrossing = **bunchCrossing_Ptr;

    // event
    event_Ptr = std::make_unique<TTreeReaderValue<ULong64_t>>(*fReader, "event");
    event = **event_Ptr;

    // genTtbarId
    genTtbarId_Ptr = std::make_unique<TTreeReaderValue<Int_t>>(*fReader, "genTtbarId");
    genTtbarId = **genTtbarId_Ptr;

    // genWeight
    genWeight_Ptr = std::make_unique<TTreeReaderValue<Float_t>>(*fReader, "genWeight");
    genWeight = **genWeight_Ptr;

    // luminosityBlock
    luminosityBlock_Ptr = std::make_unique<TTreeReaderValue<UInt_t>>(*fReader, "luminosityBlock");
    luminosityBlock = **luminosityBlock_Ptr;

    // orbitNumber
    orbitNumber_Ptr = std::make_unique<TTreeReaderValue<UInt_t>>(*fReader, "orbitNumber");
    orbitNumber = **orbitNumber_Ptr;

    // run
    RunNumber_Ptr = std::make_unique<TTreeReaderValue<UInt_t>>(*fReader, "run");
    RunNumber = **RunNumber_Ptr;
}
